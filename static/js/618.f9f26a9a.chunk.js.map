{"version":3,"file":"static/js/618.f9f26a9a.chunk.js","mappings":"gHAwBKA,E,yFAFLC,EAAAA,EAAAA,IAAO,CAAEC,eAAAA,EAAAA,GAAgBC,WAAAA,EAAAA,EAAYC,gBAAAA,EAAAA,IAEnB,SAAbJ,GAAAA,EAAAA,EAAa,iBAAbA,EAAAA,EAAa,mBAAbA,EAAAA,EAAa,qBAAbA,EAAAA,EAAa,4BAAbA,IAAAA,EAAa,KA8BlB,SAASK,EACPC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAQ,IAAIC,EAAAA,MACZC,EAAM,KACNC,EAASL,EAAUI,EACvBF,EAAMI,OAAOF,EAAKA,EAAKA,GAAMG,KAAKC,GAAK,GAAID,KAAKC,IAAI,GACpDN,EAAMI,OAAOF,EAAKN,EAAkB,EAATO,EAAYD,EAAKG,KAAKC,GAAID,KAAKC,GAAK,GAAG,GAClEN,EAAMI,OACJT,EAAiB,EAATQ,EACRP,EAAkB,EAATO,EACTD,EACAG,KAAKC,GAAK,EACV,GACA,GAEFN,EAAMI,OAAOT,EAAiB,EAATQ,EAAYD,EAAKA,EAAK,GAAIG,KAAKC,GAAK,GAAG,GAC5D,IAAIC,EAAW,IAAIC,EAAAA,sBAAsBR,EAAO,CAC9CH,MAAOA,EAAkB,EAAVC,EACfW,cAAc,EACdC,cAA4B,EAAbX,EACfY,MAAO,EACPC,UAAWT,EACXU,eAAgBf,EAChBgB,cAAef,IAKjB,OAFAQ,EAASQ,SAEFR,CACT,CAUA,IACMT,EAAU,IACVkB,EAAsB,GACtBC,EAAsB,GA2G5B,UA1GwB,WACtB,IAAMC,GACA,EADAA,EAED,EAFCA,GAGA,EAHAA,EAID,GAEDC,EAAa,EAEXC,EAAc,WAuBlB,IAtBA,IAlFkBC,EAAaC,EAkFzBC,EAAmB,SACvBC,EACAC,EACAC,GAEA,IAAMC,EAAS,iBAAaF,EAAUG,EAAC,YAAIH,EAAUI,EAAC,YAAIJ,EAAUK,GACpE,GAAMJ,EACJ,OAAO,SAACK,EAAmB,CAA6CN,UAAWA,GAAU,iCAAlCE,IAC7D,OAAQH,GACN,KAAKnC,EAAc2C,OACjB,OAAO,SAACC,EAAe,CAAwCR,UAAWA,GAAU,4BAAlCE,IACpD,KAAKtC,EAAc6C,QACjB,OAAO,SAACC,EAAgB,CAAyCV,UAAWA,GAAU,6BAAlCE,IACtD,KAAKtC,EAAc+C,MACnB,QAEE,OADAjB,KAEE,SAACkB,EAAc,CAAuCZ,UAAWA,EAAWN,WAAYA,GAAW,2BAA1DQ,IAGjD,EACMW,GAA0BC,EAAAA,EAAAA,UAAQ,iBAAM,EAAE,GAAE,IACzCC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADA,IAAIC,EAAwB,GACnBC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMjB,EAAY,CAChBG,EAAGV,EAAe,EAAJsB,EACdX,EAAGX,EACHY,EAAGZ,EAAe,EAAJwB,EACdC,EAAGzB,GAEK,IAANsB,GAAiB,IAANE,EACbD,EAAOG,KACLrB,EAAiBlC,EAAcwD,WAAYpB,GAAW,IAGxDgB,EAAOG,KAAKrB,GAtHAF,EAsH8B,EAtHjBC,EAsHoB,EArHrDD,EAAMhB,KAAKyC,KAAKzB,GAChBC,EAAMjB,KAAK0C,MAAMzB,GACVjB,KAAK0C,MAAM1C,KAAK2C,UAAY1B,EAAMD,EAAM,IAAMA,GAmHII,GAErD,CACAa,EAAOM,KAAKH,EACd,CACA,IAAMQ,GAAaV,EAAAA,EAAAA,UAAQ,WACzB,OAAOD,EAAOY,KAAI,SAACC,GACjB,OAAOA,EAAID,KAAI,SAACE,GACd,OAAOA,CACT,GACF,GACF,GAAG,CAACd,IACJ,OAAO,8BAAGW,GACZ,EAEA,OACE,SAAC,KAAM,CACLI,GAAG,SACHC,QAAM,EACNC,OAAQ,CACNC,SAAU,IAAIC,EAAAA,MAAM,EAAG,EAAG,GAC1BC,SAAU,CAAC,EAAG,GAAI,IAClBC,YAAY,GAEdC,SAAS,EACTC,MAAO,CAAEC,UAAW,IAAKC,WAAY,eAAgB,UAErD,UAACC,EAAI,YACH,6BACEN,SAAU,CAAC,GAAI,GAAI,IACnBC,YAAY,EACZ,wBAAuB,IACvB,uBAAsB,IACtBM,MAAO,UACPC,UAAW,MAEb,6BACER,SAAU,EAAE,GAAI,GAAI,IACpBC,YAAY,EACZ,wBAAuB,IACvB,uBAAsB,IACtBM,MAAO,UACPC,UAAW,KAEb,6BACER,SAAU,CAAC,EAAG,IAAK,IACnBC,YAAY,EACZ,wBAAuB,IACvB,uBAAsB,IACtBM,MAAO,UACPC,UAAW,MAEb,UAACC,EAAO,YACN,SAACC,EAAY,KACb,SAAChD,EAAW,WAKtB,EAEA,IAAM+C,EAAU,SAACE,GACf,IAAMC,GAAUC,EAAAA,EAAAA,UAOhB,OANAC,EAAAA,EAAAA,KAAS,SAACC,EAAOC,GACXJ,EAAQK,SACNL,EAAQK,QAAQnB,WACjBc,EAAQK,QAAQnB,SAAiB3B,GAAK,KAE7C,KACO,iBAAM+C,IAAKN,EAAQ,SAAED,EAAMQ,UACpC,EACMb,EAAO,SAAH,GAAyC,IAAnCa,EAAQ,EAARA,SACRC,GAAQP,EAAAA,EAAAA,UACd,GAAuBQ,EAAAA,EAAAA,MAAfC,EAAE,EAAFA,GAAIzB,EAAM,EAANA,OAOZ,OANAiB,EAAAA,EAAAA,KAAS,WACPQ,EAAGC,WAAY,EACfD,EAAGE,aACCJ,EAAMH,SAASK,EAAGG,OAAOL,EAAMH,QAASpB,EAC9C,GAAG,IAEI,kBAAOqB,IAAKE,EAAM,SAAED,GAC7B,EACMO,EAAiB,SAAH,GAA8C,IAAxC7E,EAAQ,EAARA,SAAUqB,EAAC,EAADA,EAAGC,EAAC,EAADA,EAAGC,EAAC,EAADA,EAAGa,EAAC,EAADA,EAAGsB,EAAK,EAALA,MAC9C,OACE,iBACEP,SAAU,CAAC9B,EAAGC,EAAGC,GACjBuD,MAAO,CAAC1C,EAAGA,EAAGA,GACdpC,SAAUA,EACVoD,YAAU,EACV2B,eAAa,YAEb,iCACErB,MAAOA,GAAS,UAChBsB,UAAW,GACXC,UAAW,KAInB,EACMpB,EAAe,WACnB,OAAqBqB,EAAAA,EAAAA,UAAS,CAC5B,IAAIC,EAAAA,cACF,GACA,IACAzE,EACAD,GACA2E,QAAQ,KACV,IAAID,EAAAA,cACF,GACA,IACAzE,EACAD,GACA2E,QAAQ,KACV,IAAID,EAAAA,cACF,GACA,IACAzE,EACAD,GACA2E,QAAQ,KACV,IAAID,EAAAA,cACF,GACA,IACAzE,EACAD,GACA2E,QAAQ,KACV,IAAID,EAAAA,cACF,EACA,IACAzE,EACAD,GACA2E,QAAQ,KACV,IAAID,EAAAA,cACF,IACA,IACAzE,EACAD,GACA2E,QAAQ,KACV,IAAID,EAAAA,cACF,IACA,IACAzE,EACAD,GACA2E,QAAQ,KACV,IAAID,EAAAA,cACF,IACA,IACAzE,EACAD,GACA2E,QAAQ,KACV,IAAID,EAAAA,cACF,IACA,IACAzE,EACAD,GACA2E,QAAQ,OAtDLC,GAuDL,YAvDe,GAwDX1E,GAASqB,EAAAA,EAAAA,UAAQ,iBAAO,CAC5BX,EAAG,EACHC,GAAI,EACJC,EAAG,EACHa,EAAG,GACJ,GAAG,IAEEM,GAAaV,EAAAA,EAAAA,UAAQ,WACzB,OAAOqD,EAAW1C,KAAI,SAAC3C,GACrB,IAAMoB,EAAS,iBAAapB,EAASsF,MACrC,OACE,SAACT,GAAc,kBAETlE,GAAM,IACVX,SAAUA,EACV0D,MATU,YAMLtC,EAMX,GACF,GAAG,CACDiE,EACA1E,IAEF,OAAO,8BAAG+B,GACZ,EAEMhB,EAAkB,SAAH,GAA2C,IAArCR,EAAS,EAATA,UACzB,GAAkBgE,EAAAA,EAAAA,WAAS,kBACzB/F,EAA0B,GAAK,GAAK,GAAKI,EA1O1B,EA0O8C,IADxDgG,GAEN,YAFa,GAGd,GAAkBL,EAAAA,EAAAA,WAAS,kBACzB/F,EAA0B,GAAK,GAAK,GAAKI,EA7O1B,EA6O8C,IADxDiG,GAEN,YAFa,GAGd,GAAkBN,EAAAA,EAAAA,WAAS,kBACzB/F,EAA0B,GAAK,GAAK,GAAKI,EAhP1B,EAgP8C,IADxDkG,GAEN,YAFa,GAGd,GAAkBP,EAAAA,EAAAA,WAAS,kBACzB/F,EAA0B,GAAK,GAAK,GAAKI,EAnP1B,EAmP8C,IADxDmG,GAEN,YAFa,GAGRC,EA7PR,SAAiBC,GACf,IAAK,IAAI3D,EAAI2D,EAAMC,OAAS,EAAG5D,EAAI,EAAGA,IAAK,CACzC,IAAI6D,EAAIhG,KAAK0C,MAAM1C,KAAK2C,UAAYR,EAAI,IAAI,EACrB,CAAC2D,EAAME,GAAIF,EAAM3D,IAAvC2D,EAAM3D,GAAE,KAAE2D,EAAME,GAAE,IACrB,CACA,OAAOF,CACT,CAuPoBG,CAAQ,CAAC,EAAG,EAAG,EAAG,IAkBpC,OACE,8BACGJ,EAAUhD,KAAI,SAACqD,EAAM/D,GACpB,IAAMtB,EAzUU,SAACsF,EAAe/E,GACtC,IAAMgF,GAAM,kBAAQhF,GAAS,IAAEG,EAAGH,EAAUG,EAAI,GAAKE,EAAGL,EAAUK,EAAI,KACtE,OAAQ0E,GACN,KAAK,EACHC,EAAO7E,IAAM,EACb,MACF,KAAK,EACH6E,EAAO3E,IAAM,EACb,MACF,KAAK,EACH2E,EAAO7E,IAAM,EACb6E,EAAO3E,IAAM,EAMjB,OAAO2E,CACT,CAuTuBC,CAAgBlE,EAAGf,GAClC,OArBc,SAACe,EAAWtB,GAC9B,IAAMS,EAAS,iBAAaT,EAAOU,EAAC,YAAIV,EAAOW,EAAC,YAAIX,EAAOY,GACrD6E,EAAG,4BAAwBhF,GACjC,OAAQa,GACN,KAAK,EAEH,OADAtB,EAAOW,IAAM,IACN,SAACuD,GAAc,kBAAelE,GAAM,IAAEX,SAAUuF,IAA3Ba,GAC9B,KAAK,EACH,OAAO,SAACvB,GAAc,kBAAelE,GAAM,IAAEX,SAAUwF,IAA3BY,GAC9B,KAAK,EAEH,OADAzF,EAAOW,GAAK,IACL,SAACuD,GAAc,kBAAelE,GAAM,IAAEX,SAAUyF,IAA3BW,GAC9B,KAAK,EAEH,OADAzF,EAAOW,GAAK,GACL,SAACuD,GAAc,kBAAelE,GAAM,IAAEX,SAAU0F,IAA3BU,GAElC,CAKaC,CAAYL,EAAMrF,EAC3B,KAGN,EACMmB,EAAiB,SAAH,GAMb,IALLZ,EAAS,EAATA,UACAN,EAAU,EAAVA,WAMA,GAA6BsE,EAAAA,EAAAA,WAAS,kBACpC/F,EAA0B,GAAK,IAAM,GAAKI,EAzR3B,EAyR+C,IADzD+G,GAEN,YAFwB,GAGzB,GAA0BpB,EAAAA,EAAAA,WAAS,kBACjC/F,EAA0B,IAAM,IAAM,IAAMI,EA5R7B,EA4RiD,IAD3DgH,GAEN,YAFqB,GAGtB,GAA8BrB,EAAAA,EAAAA,WAAS,kBACrC/F,EAA0B,GAAK,IAAM,GAAKI,EA/R3B,EA+R+C,IADzDiH,GAEN,YAFyB,GAG1B,GAA2BtB,EAAAA,EAAAA,WAAS,kBAClC/F,EAA0B,IAAM,IAAM,IAAMI,EAlS7B,EAkSiD,IAD3DkH,GAEN,YAFsB,GAGjBrF,EAAS,iBAAaF,EAAUG,EAAC,YAAIH,EAAUI,EAAC,YAAIJ,EAAUK,GAC9DmF,GAAU,UAAQxF,GAClBkF,EAAG,sBAAkBhF,GAC3B,OAAIR,EAAa,IAAM,GACrB8F,EAAWpF,GAAK,IAEd,iCACE,SAACuD,GAAc,qCAEJ6B,GAAU,IAAEpF,EAAGoF,EAAWpF,EAAI,KAAC,IACxCtB,SAAUuG,IAAgB,UAFlBH,EAAG,UAIb,SAACvB,GAAc,kBAET6B,GAAU,IACd1G,SAAUsG,IAAmB,UAFrBF,EAAG,iBAOjBM,EAAWpF,IAAM,IAEf,iCACE,SAACuD,GAAc,qCAEJ6B,GAAU,IAAEpF,EAAGoF,EAAWpF,EAAI,OAAG,IAC1CtB,SAAUyG,IAAiB,UAFnBL,EAAG,UAIb,SAACvB,GAAc,kBAET6B,GAAU,IACd1G,SAAUwG,IAAoB,UAFtBJ,EAAG,eAOrB,EACMxE,EAAmB,SAAH,GAA2C,IAArCV,EAAS,EAATA,UAE1B,GAAwBgE,EAAAA,EAAAA,WAAS,kBAC/B/F,EAA0B,GAAK,IAAM,GAAKI,EA5U3B,EA4U+C,IADzDoH,GAEN,YAFmB,GAGpB,GAAoCzB,EAAAA,EAAAA,WAClC,kBAAM,IAAI0B,EAAAA,eAAe,IAAM,GAAI,GAAI,GAAG,IADrCC,GAEN,YAF+B,GAGhC,GAAqB3B,EAAAA,EAAAA,WAAS,kBAAM,IAAI4B,EAAAA,YAAY,IAAM,GAAK,IAAK,IAA7DC,GAA8D,YAApD,GACXC,EAAiB,CACrB,IAAI7B,EAAAA,cAAc,IAAM,IAAMzE,EAAqB,KAAK0E,QAAQ,KAChE,IAAID,EAAAA,cAAc,IAAM,IAAMzE,EAAqB,KAAK0E,QAAQ,KAChE,IAAIwB,EAAAA,eAAe,IAAM,GAAI,GAAI,KAE7BxF,EAAS,iBAAaF,EAAUG,EAAC,YAAIH,EAAUI,EAAC,YAAIJ,EAAUK,GAC9DmF,GAAU,UAAQxF,GAExB,OADAwF,EAAWpF,IAAM,KAEf,gCACG0F,EAAerE,KAAI,SAAC3C,EAAUiC,GAC7B,IAAMgF,EAAc,iBAAajH,EAASsF,MAC1C,OACE,SAACT,GAAc,qCAEJ6B,GAAU,IAAEpF,EAAGoF,EAAWpF,GAAKW,EAAI,EAAI,QAAI,IACpDjC,SAAUA,IAAS,mBAFFiH,GAKvB,KACA,SAACpC,GAAc,qCAEJ6B,GAAU,IAAEpF,EAAGoF,EAAWpF,EAAI,OAAG,IAC1CtB,SAAU+G,IAAW,gCAFS3F,KAIhC,SAACyD,GAAc,qCAEJ6B,GAAU,IAAEpF,EAAGoF,EAAWpF,EAAI,MAAG,IAC1CtB,SAAU6G,IAA0B,+CAFSzF,KAI/C,SAACyD,GAAc,kBAET6B,GAAU,IACd1G,SAAU2G,IAAc,mCAFSvF,MAMzC,EACMI,EAAsB,SAAH,GAA2C,IAArCN,EAAS,EAATA,UAE7B,GAA2BgE,EAAAA,EAAAA,WAAS,kBAClC/F,EAA0B,GAAK,GAAK,GAAKI,EA3X1B,EA2X8C,IADxD2H,GAEN,YAFsB,GAGvB,GAAiChC,EAAAA,EAAAA,WAAS,kBACxC/F,EAA0B,IAAM,GAAK,GAAKI,EA9X3B,EA8X+C,IADzD4H,GAEN,YAF4B,GAG7B,GAA8BjC,EAAAA,EAAAA,WAAS,kBACrC/F,EAA0B,GAAK,GAAK,GAAKI,EAjY1B,EAiY8C,IADxD6H,GAEN,YAFyB,GAG1B,GAAwBlC,EAAAA,EAAAA,WAAS,kBAAM,IAAI4B,EAAAA,YAAY,IAAM,GAAK,IAAK,IAAhEO,GAAiE,YAApD,GACpB,GAA2BnC,EAAAA,EAAAA,WACzB,kBAAM,IAAI0B,EAAAA,eAAe,IAAM,GAAI,GAAI,GAAG,IADrCU,GAEN,YAFsB,GAGjBlG,EAAS,iBAAaF,EAAUG,EAAC,YAAIH,EAAUI,EAAC,YAAIJ,EAAUK,GAC9DmF,GAAU,UAAQxF,GAExB,OADAwF,EAAWpF,GAAK,KAEd,iCACE,SAACuD,GAAc,qCAEJ6B,GAAU,IAAEpF,EAAGoF,EAAWpF,EAAI,EAAI,OAAG,IAC9CtB,SAAUsH,IAAiB,6BAFAlG,KAI7B,SAACyD,GAAc,qCAEJ6B,GAAU,IAAEpF,EAAGoF,EAAWpF,EAAI,KAAC,IACxCtB,SAAUqH,IAAc,oCAFUjG,KAIpC,SAACyD,GAAc,qCAEJ6B,GAAU,IAAEpF,EAAGoF,EAAWpF,EAAI,KAAC,IACxCtB,SAAUoH,IAAoB,0CAFUhG,KAI1C,SAACyD,GAAc,qCAEJ6B,GAAU,IAAEpF,EAAGoF,EAAWpF,EAAI,KAAC,IACxCtB,SAAUmH,IAAuB,6CAFU/F,KAI7C,SAACyD,GAAc,kBAET6B,GAAU,IACd1G,SAAUkH,IAAiB,uCAFU9F,MAM7C,C","sources":["pages/ThemeSwitcher/ResumePage/ThreeD.tsx"],"sourcesContent":["import {\r\n  Canvas,\r\n  extend,\r\n  MeshProps,\r\n  useFrame,\r\n  useThree,\r\n} from \"@react-three/fiber\";\r\nimport { useMemo, useRef, useState } from \"react\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass.js\";\r\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\r\nimport {\r\n  EffectComposer,\r\n} from \"@react-three/postprocessing\";\r\nimport {\r\n  BoxGeometry,\r\n  Euler,\r\n  ExtrudeBufferGeometry,\r\n  Scene,\r\n  Shape,\r\n  SphereGeometry,\r\n  TorusGeometry,\r\n} from \"three\";\r\nextend({ EffectComposer, RenderPass, UnrealBloomPass });\r\n\r\nenum CityBlockType {\r\n  Basic,\r\n  Tiered,\r\n  Antenna,\r\n  Skyscraper,\r\n}\r\nfunction getRandomInt(min: number, max: number) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\nconst getTieredCoords = (index: number, newOrigin: any) => {\r\n  const coords = { ...newOrigin, x: newOrigin.x + 0.5, z: newOrigin.z + 0.5 };\r\n  switch (index) {\r\n    case 1:\r\n      coords.x += -1;\r\n      break;\r\n    case 2:\r\n      coords.z += -1;\r\n      break;\r\n    case 3:\r\n      coords.x += -1;\r\n      coords.z += -1;\r\n      break;\r\n    case 0:\r\n    default:\r\n      break;\r\n  }\r\n  return coords;\r\n};\r\nfunction createBoxWithRoundedEdges(\r\n  width: number,\r\n  height: number,\r\n  depth: number,\r\n  radius0: number,\r\n  smoothness: number\r\n) {\r\n  let shape = new Shape();\r\n  let eps = 0.00001;\r\n  let radius = radius0 - eps;\r\n  shape.absarc(eps, eps, eps, -Math.PI / 2, -Math.PI, true);\r\n  shape.absarc(eps, height - radius * 2, eps, Math.PI, Math.PI / 2, true);\r\n  shape.absarc(\r\n    width - radius * 2,\r\n    height - radius * 2,\r\n    eps,\r\n    Math.PI / 2,\r\n    0,\r\n    true\r\n  );\r\n  shape.absarc(width - radius * 2, eps, eps, 0, -Math.PI / 2, true);\r\n  let geometry = new ExtrudeBufferGeometry(shape, {\r\n    depth: depth - radius0 * 2,\r\n    bevelEnabled: true,\r\n    bevelSegments: smoothness * 2,\r\n    steps: 1,\r\n    bevelSize: radius,\r\n    bevelThickness: radius0,\r\n    curveSegments: smoothness,\r\n  });\r\n\r\n  geometry.center();\r\n\r\n  return geometry;\r\n}\r\n\r\nfunction shuffle(array: any[]) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\nconst smoothness = 2;\r\nconst radius0 = 0.02;\r\nconst torusTublarSegments = 75;\r\nconst torusRadialSegments = 64;\r\nconst ThreeDComponent = () => {\r\n  const origin = {\r\n    x: -8,\r\n    y: 0,\r\n    z: -8,\r\n    s: 10,\r\n  };\r\n  let basicCount = 0;\r\n  \r\n  const CityElement = () => {\r\n    const getCityBlockType = (\r\n      value: CityBlockType,\r\n      newOrigin: any,\r\n      skyscraperOverride?: boolean\r\n    ) => {\r\n      const originKey = `origin-${newOrigin.x}-${newOrigin.y}-${newOrigin.z}`;\r\n      if (!!skyscraperOverride)\r\n        return <SkyScraperCityBlock key={`sky-scraper-city-block-${originKey}`} newOrigin={newOrigin} />;\r\n      switch (value) {\r\n        case CityBlockType.Tiered:\r\n          return <TieredCityBlock key={`tiered-city-block-${originKey}`} newOrigin={newOrigin} />;\r\n        case CityBlockType.Antenna:\r\n          return <AntennaCityBlock key={`antenna-city-block-${originKey}`} newOrigin={newOrigin} />;\r\n        case CityBlockType.Basic:\r\n        default:\r\n          basicCount++;\r\n          return (\r\n            <BasicCityBlock key={`basic-city-block-${originKey}`} newOrigin={newOrigin} basicCount={basicCount} />\r\n          );\r\n      }\r\n    };\r\n    const matrix: JSX.Element[][] = useMemo(() => [], []);\r\n    for (let i = 0; i < 5; i++) {\r\n      let newRow: JSX.Element[] = [];\r\n      for (let q = 0; q < 5; q++) {\r\n        const newOrigin = {\r\n          x: origin.x + i * 4,\r\n          y: origin.y,\r\n          z: origin.z + q * 4,\r\n          s: origin.s,\r\n        };\r\n        if (i === 2 && q === 2) {\r\n          newRow.push(\r\n            getCityBlockType(CityBlockType.Skyscraper, newOrigin, true)\r\n          );\r\n        } else {\r\n          newRow.push(getCityBlockType(getRandomInt(0, 3), newOrigin));\r\n        }\r\n      }\r\n      matrix.push(newRow);\r\n    }\r\n    const mapElement = useMemo(() => {\r\n      return matrix.map((row) => {\r\n        return row.map((element) => {\r\n          return element;\r\n        });\r\n      });\r\n    }, [matrix]);\r\n    return <>{mapElement}</>;\r\n  };\r\n\r\n  return (\r\n    <Canvas\r\n      id=\"threeD\"\r\n      linear\r\n      camera={{\r\n        rotation: new Euler(0, 0, 0),\r\n        position: [0, 10, 37],\r\n        castShadow: true,\r\n      }}\r\n      shadows={true}\r\n      style={{ minHeight: 400, background: \"transparent\" }}\r\n    >\r\n      <Main>\r\n        <directionalLight\r\n          position={[40, 10, 20]}\r\n          castShadow={true}\r\n          shadow-mapSize-height={512}\r\n          shadow-mapSize-width={512}\r\n          color={\"#000ce8\"}\r\n          intensity={0.8}\r\n        />\r\n        <directionalLight\r\n          position={[-40, 10, 20]}\r\n          castShadow={true}\r\n          shadow-mapSize-height={512}\r\n          shadow-mapSize-width={512}\r\n          color={\"#9c008c\"}\r\n          intensity={1}\r\n        />\r\n        <directionalLight\r\n          position={[0, 10, -40]}\r\n          castShadow={false}\r\n          shadow-mapSize-height={512}\r\n          shadow-mapSize-width={512}\r\n          color={\"#173dfc\"}\r\n          intensity={0.5}\r\n        />\r\n        <Spinner>\r\n          <TorusElement />\r\n          <CityElement />\r\n        </Spinner>\r\n      </Main>\r\n    </Canvas>\r\n  );\r\n};\r\nexport default ThreeDComponent;\r\nconst Spinner = (props: any) => {\r\n  const spinRef = useRef<MeshProps>();\r\n  useFrame((state, delta) => {\r\n    if (spinRef.current) {\r\n      if (spinRef.current.rotation)\r\n        (spinRef.current.rotation as any).y += 0.004;\r\n    }\r\n  });\r\n  return <mesh ref={spinRef}>{props.children}</mesh>;\r\n};\r\nconst Main = ({ children }: { children: any }) => {\r\n  const scene = useRef<Scene>();\r\n  const { gl, camera } = useThree();\r\n  useFrame(() => {\r\n    gl.autoClear = false;\r\n    gl.clearDepth();\r\n    if (scene.current) gl.render(scene.current, camera);\r\n  }, 2);\r\n\r\n  return <scene ref={scene}>{children}</scene>;\r\n};\r\nconst CustomGeometry = ({ geometry, x, y, z, s, color }: any) => {\r\n  return (\r\n    <mesh\r\n      position={[x, y, z]}\r\n      scale={[s, s, s]}\r\n      geometry={geometry}\r\n      castShadow\r\n      receiveShadow\r\n    >\r\n      <meshStandardMaterial\r\n        color={color || \"#c7e6ff\"}\r\n        roughness={0.5}\r\n        metalness={1}\r\n      />\r\n    </mesh>\r\n  );\r\n};\r\nconst TorusElement = () => {\r\n  const [geometries] = useState([\r\n    new TorusGeometry(\r\n      0.6,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      0.7,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      0.8,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      0.9,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      1,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      1.1,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      1.2,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      1.3,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      1.4,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n  ]);\r\n  const origin = useMemo(() => ({\r\n    x: 0,\r\n    y: -3,\r\n    z: 0,\r\n    s: 10,\r\n  }), []);\r\n  const ringColor = \"#8ccbff\";\r\n  const mapElement = useMemo(() => {\r\n    return geometries.map((geometry) => {\r\n      const originKey = `origin-${geometry.uuid}`;\r\n      return (\r\n        <CustomGeometry\r\n          key={originKey}\r\n          {...origin}\r\n          geometry={geometry}\r\n          color={ringColor}\r\n        />\r\n      );\r\n    });\r\n  }, [\r\n    geometries,\r\n    origin\r\n  ]);\r\n  return <>{mapElement}</>;\r\n};\r\n\r\nconst TieredCityBlock = ({ newOrigin }: { newOrigin: any }) => {\r\n  const [tiered1] = useState(() =>\r\n    createBoxWithRoundedEdges(0.1, 0.2, 0.1, radius0, smoothness)\r\n  );\r\n  const [tiered2] = useState(() =>\r\n    createBoxWithRoundedEdges(0.1, 0.3, 0.1, radius0, smoothness)\r\n  );\r\n  const [tiered3] = useState(() =>\r\n    createBoxWithRoundedEdges(0.1, 0.4, 0.1, radius0, smoothness)\r\n  );\r\n  const [tiered4] = useState(() =>\r\n    createBoxWithRoundedEdges(0.1, 0.5, 0.1, radius0, smoothness)\r\n  );\r\n  const sortArray = shuffle([0, 1, 2, 3]);\r\n  const getGeometry = (i: number, origin: any) => {\r\n    const originKey = `origin-${origin.x}-${origin.y}-${origin.z}`;\r\n    const key = `tiered-city-block-${originKey}`;\r\n    switch (i) {\r\n      case 0:\r\n        origin.y += -0.5;\r\n        return <CustomGeometry key={key} {...origin} geometry={tiered1} />;\r\n      case 1:\r\n        return <CustomGeometry key={key} {...origin} geometry={tiered2} />;\r\n      case 2:\r\n        origin.y += 0.5;\r\n        return <CustomGeometry key={key} {...origin} geometry={tiered3} />;\r\n      case 3:\r\n        origin.y += 1;\r\n        return <CustomGeometry key={key} {...origin} geometry={tiered4} />;\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {sortArray.map((item, i) => {\r\n        const origin = getTieredCoords(i, newOrigin);\r\n        return getGeometry(item, origin);\r\n      })}\r\n    </>\r\n  );\r\n};\r\nconst BasicCityBlock = ({\r\n  newOrigin,\r\n  basicCount,\r\n}: {\r\n  newOrigin: any;\r\n  basicCount: number;\r\n}) => {\r\n  //Basic buildings\r\n  const [basicBottomRounded] = useState(() =>\r\n    createBoxWithRoundedEdges(0.2, 0.35, 0.2, radius0, smoothness)\r\n  );\r\n  const [basicTopRounded] = useState(() =>\r\n    createBoxWithRoundedEdges(0.16, 0.05, 0.16, radius0, smoothness)\r\n  );\r\n  const [basic2BottomRounded] = useState(() =>\r\n    createBoxWithRoundedEdges(0.2, 0.25, 0.2, radius0, smoothness)\r\n  );\r\n  const [basic2TopRounded] = useState(() =>\r\n    createBoxWithRoundedEdges(0.16, 0.05, 0.16, radius0, smoothness)\r\n  );\r\n  const originKey = `origin-${newOrigin.x}-${newOrigin.y}-${newOrigin.z}`;\r\n  const tempOrigin = { ...newOrigin };\r\n  const key = `basic-block-${originKey}`;\r\n  if (basicCount % 2 === 0) {\r\n    tempOrigin.y += 0.2;\r\n    return (\r\n      <>\r\n        <CustomGeometry\r\n          key={`${key}-top`}\r\n          {...{ ...tempOrigin, y: tempOrigin.y + 2 }}\r\n          geometry={basicTopRounded}\r\n        />\r\n        <CustomGeometry\r\n          key={`${key}-bottom`}\r\n          {...tempOrigin}\r\n          geometry={basicBottomRounded}\r\n        />\r\n      </>\r\n    );\r\n  } else {\r\n    tempOrigin.y += -0.3;\r\n    return (\r\n      <>\r\n        <CustomGeometry\r\n          key={`${key}-top`}\r\n          {...{ ...tempOrigin, y: tempOrigin.y + 1.5 }}\r\n          geometry={basic2TopRounded}\r\n        />\r\n        <CustomGeometry\r\n          key={`${key}-bottom`}\r\n          {...tempOrigin}\r\n          geometry={basic2BottomRounded}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n};\r\nconst AntennaCityBlock = ({ newOrigin }: { newOrigin: any }) => {\r\n  //Antenna\r\n  const [antennaBottom] = useState(() =>\r\n    createBoxWithRoundedEdges(0.2, 0.15, 0.2, radius0, smoothness)\r\n  );\r\n  const [antennaMiddleBottomSphere] = useState(\r\n    () => new SphereGeometry(0.09, 30, 60, 60)\r\n  );\r\n  const [antennaTop] = useState(() => new BoxGeometry(0.02, 0.4, 0.02));\r\n  const ringGeometries = [\r\n    new TorusGeometry(0.05, 0.01, torusRadialSegments, 100).rotateX(190),\r\n    new TorusGeometry(0.04, 0.01, torusRadialSegments, 100).rotateX(190),\r\n    new SphereGeometry(0.05, 30, 60, 60),\r\n  ];\r\n  const originKey = `origin-${newOrigin.x}-${newOrigin.y}-${newOrigin.z}`;\r\n  const tempOrigin = { ...newOrigin };\r\n  tempOrigin.y += -0.75;\r\n  return (\r\n    <>\r\n      {ringGeometries.map((geometry, i) => {\r\n        const innerOriginKey = `origin-${geometry.uuid}`;\r\n        return (\r\n          <CustomGeometry\r\n            key={`ring-geo-${innerOriginKey}`}\r\n            {...{ ...tempOrigin, y: tempOrigin.y + (i / 4 + 2.5) }}\r\n            geometry={geometry}\r\n          />\r\n        );\r\n      })}\r\n      <CustomGeometry\r\n        key={`city-block-antennaTop-${originKey}`}\r\n        {...{ ...tempOrigin, y: tempOrigin.y + 1.5 }}\r\n        geometry={antennaTop}\r\n      />\r\n      <CustomGeometry\r\n        key={`city-block-antennaMiddleBottomSphere-${originKey}`}\r\n        {...{ ...tempOrigin, y: tempOrigin.y + 0.5 }}\r\n        geometry={antennaMiddleBottomSphere}\r\n      />\r\n      <CustomGeometry\r\n        key={`city-block-antennaBottom-${originKey}`}\r\n        {...tempOrigin}\r\n        geometry={antennaBottom}\r\n      />\r\n    </>\r\n  );\r\n};\r\nconst SkyScraperCityBlock = ({ newOrigin }: { newOrigin: any }) => {\r\n  //Skyscraper\r\n  const [skyscraperBottom] = useState(() =>\r\n    createBoxWithRoundedEdges(0.2, 0.6, 0.2, radius0, smoothness)\r\n  );\r\n  const [skyscraperMiddleBottom] = useState(() =>\r\n    createBoxWithRoundedEdges(0.15, 0.4, 0.1, radius0, smoothness)\r\n  );\r\n  const [skyscraperMiddleTop] = useState(() =>\r\n    createBoxWithRoundedEdges(0.1, 0.6, 0.1, radius0, smoothness)\r\n  );\r\n  const [skyscraperTop] = useState(() => new BoxGeometry(0.02, 0.8, 0.02));\r\n  const [skyscraperSphere] = useState(\r\n    () => new SphereGeometry(0.05, 30, 60, 60)\r\n  );\r\n  const originKey = `origin-${newOrigin.x}-${newOrigin.y}-${newOrigin.z}`;\r\n  const tempOrigin = { ...newOrigin };\r\n  tempOrigin.y += 1.5;\r\n  return (\r\n    <>\r\n      <CustomGeometry\r\n        key={`sky-scraper-sphere-${originKey}`}\r\n        {...{ ...tempOrigin, y: tempOrigin.y + 6 + 3.5 }}\r\n        geometry={skyscraperSphere}\r\n      />\r\n      <CustomGeometry\r\n        key={`sky-scraper-skyscraperTop-${originKey}`}\r\n        {...{ ...tempOrigin, y: tempOrigin.y + 6 }}\r\n        geometry={skyscraperTop}\r\n      />\r\n      <CustomGeometry\r\n        key={`sky-scraper-skyscraperMiddleTop-${originKey}`}\r\n        {...{ ...tempOrigin, y: tempOrigin.y + 3 }}\r\n        geometry={skyscraperMiddleTop}\r\n      />\r\n      <CustomGeometry\r\n        key={`sky-scraper-skyscraperMiddleBottom-${originKey}`}\r\n        {...{ ...tempOrigin, y: tempOrigin.y + 2 }}\r\n        geometry={skyscraperMiddleBottom}\r\n      />\r\n      <CustomGeometry\r\n        key={`sky-scraper-skyscraperBottom-${originKey}`}\r\n        {...tempOrigin}\r\n        geometry={skyscraperBottom}\r\n      />\r\n    </>\r\n  );\r\n};"],"names":["CityBlockType","extend","EffectComposer","RenderPass","UnrealBloomPass","createBoxWithRoundedEdges","width","height","depth","radius0","smoothness","shape","Shape","eps","radius","absarc","Math","PI","geometry","ExtrudeBufferGeometry","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","curveSegments","center","torusTublarSegments","torusRadialSegments","origin","basicCount","CityElement","min","max","getCityBlockType","value","newOrigin","skyscraperOverride","originKey","x","y","z","SkyScraperCityBlock","Tiered","TieredCityBlock","Antenna","AntennaCityBlock","Basic","BasicCityBlock","matrix","useMemo","i","newRow","q","s","push","Skyscraper","ceil","floor","random","mapElement","map","row","element","id","linear","camera","rotation","Euler","position","castShadow","shadows","style","minHeight","background","Main","color","intensity","Spinner","TorusElement","props","spinRef","useRef","useFrame","state","delta","current","ref","children","scene","useThree","gl","autoClear","clearDepth","render","CustomGeometry","scale","receiveShadow","roughness","metalness","useState","TorusGeometry","rotateX","geometries","uuid","tiered1","tiered2","tiered3","tiered4","sortArray","array","length","j","shuffle","item","index","coords","getTieredCoords","key","getGeometry","basicBottomRounded","basicTopRounded","basic2BottomRounded","basic2TopRounded","tempOrigin","antennaBottom","SphereGeometry","antennaMiddleBottomSphere","BoxGeometry","antennaTop","ringGeometries","innerOriginKey","skyscraperBottom","skyscraperMiddleBottom","skyscraperMiddleTop","skyscraperTop","skyscraperSphere"],"sourceRoot":""}