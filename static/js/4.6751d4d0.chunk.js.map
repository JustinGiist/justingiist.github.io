{"version":3,"sources":["pages/ThemeSwitcher/ResumePage/ThreeD.tsx"],"names":["extend","EffectComposer","RenderPass","UnrealBloomPass","radius0","torusTublarSegments","torusRadialSegments","ThreeDComponent","props","origin","basicCount","useState","createBoxWithRoundedEdges","tiered1","tiered2","tiered3","tiered4","basicBottomRounded","basicTopRounded","basic2BottomRounded","basic2TopRounded","skyscraperBottom","skyscraperMiddleBottom","skyscraperMiddleTop","BoxGeometry","skyscraperTop","SphereGeometry","skyscraperSphere","antennaBottom","antennaMiddleBottomSphere","antennaTop","ringGeometries","TorusGeometry","rotateX","CityElement","BasicCityBlock","newOrigin","tempOrigin","y","CustomGeometry","geometry","x","AntennaCityBlock","map","i","SkyScraperCityBlock","TieredCityBlock","sortArray","array","length","j","Math","floor","random","shuffle","item","getGeometry","getTieredCoords","getCityBlockType","value","skyscraperOverride","CityBlockType","Tiered","Antenna","Basic","matrix","newRow","q","z","s","push","Skyscraper","getRandomInt","mapElement","useMemo","row","element","id","linear","camera","rotation","Euler","position","castShadow","shadows","style","minHeight","background","Main","color","intensity","Spinner","TorusElement","spinRef","useRef","useFrame","state","delta","current","ref","children","scene","useThree","gl","autoClear","clearDepth","render","scale","receiveShadow","roughness","metalness","geometries","min","max","ceil","index","coords","width","height","depth","smoothness","shape","Shape","eps","radius","absarc","PI","ExtrudeBufferGeometry","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","curveSegments","center"],"mappings":"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","file":"static/js/4.6751d4d0.chunk.js","sourcesContent":["import {\r\n  Canvas,\r\n  extend,\r\n  MeshProps,\r\n  ReactThreeFiber,\r\n  useFrame,\r\n  useThree,\r\n} from \"@react-three/fiber\";\r\nimport { Suspense, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass.js\";\r\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\r\nimport {\r\n  EffectComposer,\r\n  DepthOfField,\r\n  Bloom,\r\n  Noise,\r\n  Vignette,\r\n} from \"@react-three/postprocessing\";\r\nimport THREE, {\r\n  BoxGeometry,\r\n  BufferGeometry,\r\n  Euler,\r\n  ExtrudeBufferGeometry,\r\n  Plane,\r\n  Scene,\r\n  Shape,\r\n  SphereGeometry,\r\n  TorusGeometry,\r\n  Vector2,\r\n  Vector3,\r\n} from \"three\";\r\nimport { Loading } from \"mdi-material-ui\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nextend({ EffectComposer, RenderPass, UnrealBloomPass });\r\n\r\ninterface ThreeDComponentProps {}\r\nconst smoothness = 2;\r\nconst radius0 = 0.02;\r\nconst torusTublarSegments = 75;\r\nconst torusRadialSegments = 64;\r\nconst ThreeDComponent = (props: ThreeDComponentProps) => {\r\n  const origin = {\r\n    x: -8,\r\n    y: 0,\r\n    z: -8,\r\n    s: 10,\r\n  };\r\n  let basicCount = 0;\r\n  //Tiered buildings\r\n  const [tiered1] = useState(() =>\r\n    createBoxWithRoundedEdges(0.1, 0.2, 0.1, radius0, smoothness)\r\n  );\r\n  const [tiered2] = useState(() =>\r\n    createBoxWithRoundedEdges(0.1, 0.3, 0.1, radius0, smoothness)\r\n  );\r\n  const [tiered3] = useState(() =>\r\n    createBoxWithRoundedEdges(0.1, 0.4, 0.1, radius0, smoothness)\r\n  );\r\n  const [tiered4] = useState(() =>\r\n    createBoxWithRoundedEdges(0.1, 0.5, 0.1, radius0, smoothness)\r\n  );\r\n  //Basic buildings\r\n  const [basicBottomRounded] = useState(() =>\r\n    createBoxWithRoundedEdges(0.2, 0.35, 0.2, radius0, smoothness)\r\n  );\r\n  const [basicTopRounded] = useState(() =>\r\n    createBoxWithRoundedEdges(0.16, 0.05, 0.16, radius0, smoothness)\r\n  );\r\n  const [basic2BottomRounded] = useState(() =>\r\n    createBoxWithRoundedEdges(0.2, 0.25, 0.2, radius0, smoothness)\r\n  );\r\n  const [basic2TopRounded] = useState(() =>\r\n    createBoxWithRoundedEdges(0.16, 0.05, 0.16, radius0, smoothness)\r\n  );\r\n  //Skyscraper\r\n  const [skyscraperBottom] = useState(() =>\r\n    createBoxWithRoundedEdges(0.2, 0.6, 0.2, radius0, smoothness)\r\n  );\r\n  const [skyscraperMiddleBottom] = useState(() =>\r\n    createBoxWithRoundedEdges(0.15, 0.4, 0.1, radius0, smoothness)\r\n  );\r\n  const [skyscraperMiddleTop] = useState(() =>\r\n    createBoxWithRoundedEdges(0.1, 0.6, 0.1, radius0, smoothness)\r\n  );\r\n  const [skyscraperTop] = useState(() => new BoxGeometry(0.02, 0.8, 0.02));\r\n  const [skyscraperSphere] = useState(\r\n    () => new SphereGeometry(0.05, 30, 60, 60)\r\n  );\r\n  //Antenna\r\n  const [antennaBottom] = useState(() =>\r\n    createBoxWithRoundedEdges(0.2, 0.15, 0.2, radius0, smoothness)\r\n  );\r\n  const [antennaMiddleBottomSphere] = useState(\r\n    () => new SphereGeometry(0.09, 30, 60, 60)\r\n  );\r\n  const [antennaTop] = useState(() => new BoxGeometry(0.02, 0.4, 0.02));\r\n  const ringGeometries = [\r\n    new TorusGeometry(0.05, 0.01, torusRadialSegments, 100).rotateX(190),\r\n    new TorusGeometry(0.04, 0.01, torusRadialSegments, 100).rotateX(190),\r\n    new SphereGeometry(0.05, 30, 60, 60),\r\n  ];\r\n  const CityElement = () => {\r\n    const BasicCityBlock = ({\r\n      newOrigin,\r\n      basicCount,\r\n    }: {\r\n      newOrigin: any;\r\n      basicCount: number;\r\n    }) => {\r\n      const tempOrigin = { ...newOrigin };\r\n      if (basicCount % 2 === 0) {\r\n        tempOrigin.y += 0.2;\r\n        return (\r\n          <>\r\n            <CustomGeometry\r\n              key={newOrigin.x * 3}\r\n              {...{ ...tempOrigin, y: tempOrigin.y + 2 }}\r\n              geometry={basicTopRounded}\r\n            />\r\n            <CustomGeometry\r\n              key={newOrigin.x * 2}\r\n              {...tempOrigin}\r\n              geometry={basicBottomRounded}\r\n            />\r\n          </>\r\n        );\r\n      } else {\r\n        tempOrigin.y += -0.3;\r\n        return (\r\n          <>\r\n            <CustomGeometry\r\n              key={newOrigin.x * 3}\r\n              {...{ ...tempOrigin, y: tempOrigin.y + 1.5 }}\r\n              geometry={basic2TopRounded}\r\n            />\r\n            <CustomGeometry\r\n              key={newOrigin.x * 2}\r\n              {...tempOrigin}\r\n              geometry={basic2BottomRounded}\r\n            />\r\n          </>\r\n        );\r\n      }\r\n    };\r\n    const AntennaCityBlock = ({ newOrigin }: { newOrigin: any }) => {\r\n      const tempOrigin = { ...newOrigin };\r\n      tempOrigin.y += -0.75;\r\n      return (\r\n        <>\r\n          {ringGeometries.map((geometry, i) => {\r\n            return (\r\n              <CustomGeometry\r\n                key={1}\r\n                {...{ ...tempOrigin, y: tempOrigin.y + (i / 4 + 2.5) }}\r\n                geometry={geometry}\r\n              />\r\n            );\r\n          })}\r\n          <CustomGeometry\r\n            key={newOrigin.x * 2}\r\n            {...{ ...tempOrigin, y: tempOrigin.y + 1.5 }}\r\n            geometry={antennaTop}\r\n          />\r\n          <CustomGeometry\r\n            key={newOrigin.x * 3}\r\n            {...{ ...tempOrigin, y: tempOrigin.y + 0.5 }}\r\n            geometry={antennaMiddleBottomSphere}\r\n          />\r\n          <CustomGeometry\r\n            key={newOrigin.x * 5}\r\n            {...tempOrigin}\r\n            geometry={antennaBottom}\r\n          />\r\n        </>\r\n      );\r\n    };\r\n    const SkyScraperCityBlock = ({ newOrigin }: { newOrigin: any }) => {\r\n      const tempOrigin = { ...newOrigin };\r\n      tempOrigin.y += 1.5;\r\n      return (\r\n        <>\r\n          <CustomGeometry\r\n            key={1}\r\n            {...{ ...tempOrigin, y: tempOrigin.y + 6 + 3.5 }}\r\n            geometry={skyscraperSphere}\r\n          />\r\n          <CustomGeometry\r\n            key={newOrigin.x * 2}\r\n            {...{ ...tempOrigin, y: tempOrigin.y + 6 }}\r\n            geometry={skyscraperTop}\r\n          />\r\n          <CustomGeometry\r\n            key={newOrigin.x * 3}\r\n            {...{ ...tempOrigin, y: tempOrigin.y + 3 }}\r\n            geometry={skyscraperMiddleTop}\r\n          />\r\n          <CustomGeometry\r\n            key={newOrigin.x * 4}\r\n            {...{ ...tempOrigin, y: tempOrigin.y + 2 }}\r\n            geometry={skyscraperMiddleBottom}\r\n          />\r\n          <CustomGeometry\r\n            key={newOrigin.x * 5}\r\n            {...tempOrigin}\r\n            geometry={skyscraperBottom}\r\n          />\r\n        </>\r\n      );\r\n    };\r\n    const getRotation = (value: number) => {\r\n      const rotationArray = [0, 90, 180, 270];\r\n      return rotationArray[value];\r\n    };\r\n    function shuffle(array: any[]) {\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n      }\r\n      return array;\r\n    }\r\n    const TieredCityBlock = ({ newOrigin }: { newOrigin: any }) => {\r\n      const sortArray = shuffle([0, 1, 2, 3]);\r\n      const getGeometry = (i: number, origin: any) => {\r\n        switch (i) {\r\n          case 0:\r\n            origin.y += -0.5;\r\n            return <CustomGeometry key={i} {...origin} geometry={tiered1} />;\r\n          case 1:\r\n            return <CustomGeometry key={i} {...origin} geometry={tiered2} />;\r\n          case 2:\r\n            origin.y += 0.5;\r\n            return <CustomGeometry key={i} {...origin} geometry={tiered3} />;\r\n          case 3:\r\n            origin.y += 1;\r\n            return <CustomGeometry key={i} {...origin} geometry={tiered4} />;\r\n        }\r\n      };\r\n      return (\r\n        <>\r\n          {sortArray.map((item, i) => {\r\n            const origin = getTieredCoords(i, newOrigin);\r\n            return getGeometry(item, origin);\r\n          })}\r\n        </>\r\n      );\r\n    };\r\n\r\n    const getCityBlockType = (\r\n      value: CityBlockType,\r\n      newOrigin: any,\r\n      skyscraperOverride?: boolean\r\n    ) => {\r\n      if (!!skyscraperOverride)\r\n        return <SkyScraperCityBlock newOrigin={newOrigin} />;\r\n      switch (value) {\r\n        case CityBlockType.Tiered:\r\n          return <TieredCityBlock newOrigin={newOrigin} />;\r\n        case CityBlockType.Antenna:\r\n          return <AntennaCityBlock newOrigin={newOrigin} />;\r\n        case CityBlockType.Basic:\r\n        default:\r\n          basicCount++;\r\n          return (\r\n            <BasicCityBlock newOrigin={newOrigin} basicCount={basicCount} />\r\n          );\r\n      }\r\n    };\r\n    const matrix: JSX.Element[][] = [];\r\n    for (let i = 0; i < 5; i++) {\r\n      let newRow: JSX.Element[] = [];\r\n      for (let q = 0; q < 5; q++) {\r\n        const newOrigin = {\r\n          x: origin.x + i * 4,\r\n          y: origin.y,\r\n          z: origin.z + q * 4,\r\n          s: origin.s,\r\n        };\r\n        if (i === 2 && q === 2) {\r\n          newRow.push(\r\n            getCityBlockType(CityBlockType.Skyscraper, newOrigin, true)\r\n          );\r\n        } else {\r\n          newRow.push(getCityBlockType(getRandomInt(0, 3), newOrigin));\r\n        }\r\n      }\r\n      matrix.push(newRow);\r\n    }\r\n    const mapElement = useMemo(() => {\r\n      return matrix.map((row) => {\r\n        return row.map((element) => {\r\n          return element;\r\n        });\r\n      });\r\n    }, [matrix]);\r\n    return <>{mapElement}</>;\r\n  };\r\n\r\n  return (\r\n    <Canvas\r\n      id=\"threeD\"\r\n      linear\r\n      camera={{\r\n        rotation: new Euler(0, 0, 0),\r\n        position: [0, 10, 37],\r\n        castShadow: true,\r\n      }}\r\n      shadows={true}\r\n      style={{ minHeight: 400, background: \"#000000\" }}\r\n    >\r\n      <Main>\r\n        <directionalLight\r\n          position={[40, 10, 20]}\r\n          castShadow={true}\r\n          shadow-mapSize-height={512}\r\n          shadow-mapSize-width={512}\r\n          color={\"#000ce8\"}\r\n          intensity={0.8}\r\n        />\r\n        <directionalLight\r\n          position={[-40, 10, 20]}\r\n          castShadow={true}\r\n          shadow-mapSize-height={512}\r\n          shadow-mapSize-width={512}\r\n          color={\"#9c008c\"}\r\n          intensity={1}\r\n        />\r\n        <directionalLight\r\n          position={[0, 10, -40]}\r\n          castShadow={false}\r\n          shadow-mapSize-height={512}\r\n          shadow-mapSize-width={512}\r\n          color={\"#173dfc\"}\r\n          intensity={0.5}\r\n        />\r\n        {/*\r\n      \r\n        */}\r\n\r\n        <Spinner>\r\n          <TorusElement />\r\n          <CityElement />\r\n        </Spinner>\r\n      </Main>\r\n    </Canvas>\r\n  );\r\n};\r\nexport default ThreeDComponent;\r\nconst Spinner = (props: any) => {\r\n  const spinRef = useRef<MeshProps>();\r\n  useFrame((state, delta) => {\r\n    if (spinRef.current) {\r\n      if (spinRef.current.rotation)\r\n        (spinRef.current.rotation as any).y += 0.004;\r\n    }\r\n  });\r\n  return <mesh ref={spinRef}>{props.children}</mesh>;\r\n};\r\nconst particleSystem = () => {\r\n  const particleGeometry = new BufferGeometry();\r\n  const particleCount = 5000;\r\n};\r\nconst Main = ({ children }: { children: any }) => {\r\n  const scene = useRef<Scene>();\r\n  const { gl, camera } = useThree();\r\n  useFrame(() => {\r\n    gl.autoClear = false;\r\n    gl.clearDepth();\r\n    if (scene.current) gl.render(scene.current, camera);\r\n  }, 2);\r\n\r\n  return <scene ref={scene}>{children}</scene>;\r\n};\r\nconst CustomGeometry = ({ geometry, x, y, z, s, color }: any) => {\r\n  return (\r\n    <mesh\r\n      //ref={ref}\r\n      position={[x, y, z]}\r\n      scale={[s, s, s]}\r\n      geometry={geometry}\r\n      castShadow\r\n      receiveShadow\r\n    >\r\n      {/*<meshPhongMaterial\r\n        color={color || \"#c7e6ff\"}\r\n        shininess={100}\r\n        specular={\"#a38aff\"}\r\n      envMap={Reflection()}\r\n      />*/}\r\n      <meshStandardMaterial\r\n        color={color || \"#c7e6ff\"}\r\n        roughness={0.5}\r\n        metalness={1}\r\n      />\r\n    </mesh>\r\n  );\r\n};\r\nconst TorusElement = () => {\r\n  const [geometries] = useState([\r\n    new TorusGeometry(\r\n      0.6,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      0.7,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      0.8,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      0.9,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      1,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      1.1,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      1.2,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      1.3,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n    new TorusGeometry(\r\n      1.4,\r\n      0.01,\r\n      torusRadialSegments,\r\n      torusTublarSegments\r\n    ).rotateX(190),\r\n  ]);\r\n  const origin = {\r\n    x: 0,\r\n    y: -3,\r\n    z: 0,\r\n    s: 10,\r\n  };\r\n  const ringColor = \"#8ccbff\";\r\n  const mapElement = useMemo(() => {\r\n    return geometries.map((geometry) => {\r\n      return (\r\n        <CustomGeometry\r\n          key={1}\r\n          {...origin}\r\n          geometry={geometry}\r\n          color={ringColor}\r\n        />\r\n      );\r\n    });\r\n  }, [geometries]);\r\n  return <>{mapElement}</>;\r\n};\r\nenum CityBlockType {\r\n  Basic,\r\n  Tiered,\r\n  Antenna,\r\n  Skyscraper,\r\n}\r\nfunction getRandomInt(min: number, max: number) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\nconst getTieredCoords = (index: number, newOrigin: any) => {\r\n  const coords = { ...newOrigin, x: newOrigin.x + 0.5, z: newOrigin.z + 0.5 };\r\n  switch (index) {\r\n    case 1:\r\n      coords.x += -1;\r\n      break;\r\n    case 2:\r\n      coords.z += -1;\r\n      break;\r\n    case 3:\r\n      coords.x += -1;\r\n      coords.z += -1;\r\n      break;\r\n    case 0:\r\n    default:\r\n      break;\r\n  }\r\n  return coords;\r\n};\r\nfunction createBoxWithRoundedEdges(\r\n  width: number,\r\n  height: number,\r\n  depth: number,\r\n  radius0: number,\r\n  smoothness: number\r\n) {\r\n  let shape = new Shape();\r\n  let eps = 0.00001;\r\n  let radius = radius0 - eps;\r\n  shape.absarc(eps, eps, eps, -Math.PI / 2, -Math.PI, true);\r\n  shape.absarc(eps, height - radius * 2, eps, Math.PI, Math.PI / 2, true);\r\n  shape.absarc(\r\n    width - radius * 2,\r\n    height - radius * 2,\r\n    eps,\r\n    Math.PI / 2,\r\n    0,\r\n    true\r\n  );\r\n  shape.absarc(width - radius * 2, eps, eps, 0, -Math.PI / 2, true);\r\n  let geometry = new ExtrudeBufferGeometry(shape, {\r\n    depth: depth - radius0 * 2,\r\n    bevelEnabled: true,\r\n    bevelSegments: smoothness * 2,\r\n    steps: 1,\r\n    bevelSize: radius,\r\n    bevelThickness: radius0,\r\n    curveSegments: smoothness,\r\n  });\r\n\r\n  geometry.center();\r\n\r\n  return geometry;\r\n}\r\n"],"sourceRoot":""}