{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Justin\\\\Documents\\\\GitHub\\\\Portfolio_Website\\\\src\\\\pages\\\\ThemeSwitcher\\\\ResumePage\\\\ResumePage.tsx\";\nimport \"./ResumePage.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ResumePage = () => {\n  const jobList = [{\n    label: \"StatusQuote Inc\",\n    date: \"January 2020 - Present\",\n    context: [{\n      label: \"Engineered a React Native Investment app for an Enterprise level company within two months. Split logic codebase from render codebase, making a React and React Native Project that could start either.\"\n    }, {\n      label: \"Exchanged communications with many top level clients, such as the Head of a Global Medical Company, to accurately create enterprise level in-house financial applications and organizational software.\"\n    }, {\n      label: \"Created programs that organize financial data into Government Regulated Excel and PDF documents to be submitted easily. Simplifying a meticulous week long process, to only a click of a button.\"\n    }, {\n      label: \"Worked on a multitude of projects ranging from React, Angular, .Net MVC, React Native, and many older in-house systems. I adapted quickly to new languages, new techniques and new enviornments to be successful.\"\n    }]\n  }, {\n    label: \"GhoulCode\",\n    date: \"November 2020 - Present\",\n    context: [{\n      label: \"Enhanced the user experience of the website, adding icons and increasing flow of the commerce page.\"\n    }]\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wholeBackground\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contentBackground\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"titleText \\r headline one\",\n            children: \"Resume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jobContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"primaryText titleOne slide one\",\n              children: \"Work History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this), jobList.map((job, i) => {\n              return /*#__PURE__*/_jsxDEV(DisplayElement, {\n                options: job\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 24\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = ResumePage;\nexport default ResumePage;\nexport const DisplayElement = ({\n  options\n}) => {\n  var _options$date;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      paddingBottom: 24\n    },\n    className: options.link ? \"link\" : \"\",\n    onClick: () => {\n      if (options.link) {\n        window.open(options.link, \"_blank\");\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jobElementContainer \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: options.isContext ? \"teritaryText \" : \"secondaryText titleTwo slide two\",\n        children: options.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 16\n        },\n        className: \"primaryText slide two\",\n        children: (_options$date = options.date) !== null && _options$date !== void 0 ? _options$date : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), options.context && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"jobContext \",\n        children: options.context.map((job, i) => {\n          job.isContext = true;\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"slide three\",\n            style: {\n              animationDelay: (0.5 + 0.25 * (i + 1)).toString() + \"s\"\n            },\n            children: /*#__PURE__*/_jsxDEV(DisplayElement, {\n              options: job\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 19\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), options.image && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"jobImage slide two\",\n      src: options.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_c2 = DisplayElement;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ResumePage\");\n$RefreshReg$(_c2, \"DisplayElement\");","map":{"version":3,"sources":["C:/Users/Justin/Documents/GitHub/Portfolio_Website/src/pages/ThemeSwitcher/ResumePage/ResumePage.tsx"],"names":["ResumePage","jobList","label","date","context","map","job","i","DisplayElement","options","display","paddingBottom","link","window","open","isContext","fontSize","animationDelay","toString","image"],"mappings":"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","sourcesContent":["import \"./ResumePage.scss\";\r\n\r\nexport interface iDisplay {\r\n  label: string;\r\n  date?: string;\r\n  image?: string;\r\n  link?: string;\r\n  context?: iDisplay[];\r\n  isContext?: boolean;\r\n}\r\nconst ResumePage = () => {\r\n  const jobList: iDisplay[] = [\r\n    {\r\n      label: \"StatusQuote Inc\",\r\n      date: \"January 2020 - Present\",\r\n      context: [\r\n        {\r\n          label:\r\n            \"Engineered a React Native Investment app for an Enterprise level company within two months. Split logic codebase from render codebase, making a React and React Native Project that could start either.\",\r\n        },\r\n        {\r\n          label:\r\n            \"Exchanged communications with many top level clients, such as the Head of a Global Medical Company, to accurately create enterprise level in-house financial applications and organizational software.\",\r\n        },\r\n        {\r\n          label:\r\n            \"Created programs that organize financial data into Government Regulated Excel and PDF documents to be submitted easily. Simplifying a meticulous week long process, to only a click of a button.\",\r\n        },\r\n        {\r\n          label:\r\n            \"Worked on a multitude of projects ranging from React, Angular, .Net MVC, React Native, and many older in-house systems. I adapted quickly to new languages, new techniques and new enviornments to be successful.\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      label: \"GhoulCode\",\r\n      date: \"November 2020 - Present\",\r\n      context: [\r\n        {\r\n          label:\r\n            \"Enhanced the user experience of the website, adding icons and increasing flow of the commerce page.\",\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <div className=\"wholeBackground\">\r\n        <div className=\"contentBackground\">\r\n          <div className=\"content\">\r\n            <div\r\n              className=\"titleText \r\n            headline one\"\r\n            >\r\n              Resume\r\n            </div>\r\n            <div className=\"jobContainer\">\r\n              <div className=\"primaryText titleOne slide one\">Work History</div>\r\n              {/*<div className=\"line\" />*/}\r\n              {jobList.map((job, i) => {\r\n                return <DisplayElement options={job} />;\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ResumePage;\r\nexport const DisplayElement = ({ options }: { options: iDisplay }) => {\r\n  return (\r\n    <div\r\n      style={{ display: \"flex\", paddingBottom: 24 }}\r\n      className={options.link ? \"link\" : \"\"}\r\n      onClick={() => {\r\n        if (options.link) {\r\n          window.open(options.link, \"_blank\");\r\n        }\r\n      }}\r\n    >\r\n      <div className=\"jobElementContainer \">\r\n        <div\r\n          className={\r\n            options.isContext\r\n              ? \"teritaryText \"\r\n              : \"secondaryText titleTwo slide two\"\r\n          }\r\n        >\r\n          {options.label}\r\n        </div>\r\n        <div style={{ fontSize: 16 }} className=\"primaryText slide two\">\r\n          {options.date ?? \"\"}\r\n        </div>\r\n        {options.context && (\r\n          <ul className={\"jobContext \"}>\r\n            {options.context.map((job, i) => {\r\n              job.isContext = true;\r\n              return (\r\n                <li\r\n                  className=\"slide three\"\r\n                  style={{\r\n                    animationDelay: (0.5 + 0.25 * (i + 1)).toString() + \"s\",\r\n                  }}\r\n                  key={i}\r\n                >\r\n                  <DisplayElement options={job} />\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        )}\r\n      </div>\r\n      {options.image && (\r\n        <img className=\"jobImage slide two\" src={options.image} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}