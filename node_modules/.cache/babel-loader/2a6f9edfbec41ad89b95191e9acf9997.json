{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Justin\\\\Documents\\\\GitHub\\\\Portfolio_Website\\\\src\\\\components\\\\NavBar\\\\NavBar.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useMemo, useState } from \"react\";\nimport { ThemeManagerContext } from \"../../App\";\nimport { GlobalThemes } from \"../../ThemeManager\";\nimport NavButton from \"../NavButton/NavButton\";\nimport \"./NavBar.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NavBar = ({\n  isTopBar\n}) => {\n  _s();\n\n  const {\n    themeManager,\n    theme,\n    setThemeContext\n  } = useContext(ThemeManagerContext);\n  const spookyNavButtons = [\"Skull\", \"Bat\"];\n  const safariNavButtons = [\"Sun\", \"Bug\"];\n  const eightiesNavButtons = [\"Atari\", \"Invader\"];\n  const dystopiaNavButtons = [\"Atari\", \"SportsEsports\"];\n  const defaultNavButtons = [\"Home\", \"Themes\"];\n  const [label, setLabel] = useState(\"Webpage\");\n  const [openContext, setOpenContext] = useState(false);\n  const [navButtons, setNavButtons] = useState([{\n    icon: \"Resume\",\n    label: \"Resume\",\n    themeChanger: GlobalThemes.Resume,\n    route: \"/resume\"\n  }, {\n    icon: \"Themes\",\n    label: \"Themes Page\",\n    contextItems: [{\n      icon: \"Projects\",\n      label: \"Enterprise\",\n      themeChanger: GlobalThemes.Enterprise,\n      route: \"/enterprise\"\n    }, {\n      icon: \"Bat\",\n      label: \"Haunted House\",\n      themeChanger: GlobalThemes.Spooky,\n      route: \"/hauntedHouse\"\n    }, {\n      icon: \"Sales\",\n      label: \"Sales\",\n      themeChanger: GlobalThemes.Sales,\n      route: \"/sales\"\n    }\n    /*\r\n    {\r\n      icon: \"Paw\",\r\n      label: \"Safari Learning\",\r\n      themeChanger: GlobalThemes.Safari,\r\n      route: \"/safari\",\r\n    },\r\n    {\r\n      icon: \"SportsEsports\",\r\n      label: \"80s Arcade\",\r\n      themeChanger: GlobalThemes.Arcade,\r\n      route: \"/arcade\",\r\n    },\r\n    {\r\n      icon: \"Skull\",\r\n      label: \"Dystopia\",\r\n      themeChanger: GlobalThemes.Dystopia,\r\n      route: \"/dystopia\",\r\n    },\r\n    */\n    ]\n  }]);\n\n  const setIcons = icons => {\n    let tempButtons = navButtons;\n    icons.forEach((icon, i) => {\n      tempButtons[i][\"icon\"] = icon;\n    });\n    setNavButtons(tempButtons);\n  };\n\n  const getTheme = useMemo(() => {\n    switch (theme) {\n      case GlobalThemes.Spooky:\n        setLabel(\"Haunted House Tours\");\n        setIcons(spookyNavButtons);\n        break;\n\n      case GlobalThemes.Safari:\n        setLabel(\"Safari Learning Center\");\n        setIcons(safariNavButtons);\n        break;\n\n      case GlobalThemes.Arcade:\n        setLabel(\"80s Arcade\");\n        setIcons(eightiesNavButtons);\n        break;\n\n      case GlobalThemes.Dystopia:\n        setLabel(\"Dystopia\");\n        setIcons(dystopiaNavButtons);\n        break;\n\n      case GlobalThemes.Resume:\n      case GlobalThemes.Enterprise:\n      default:\n        setLabel(theme);\n        setIcons(defaultNavButtons);\n        break;\n    }\n\n    return theme;\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"navBar horizontal \",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"headline six navBarLabel textTitle\",\n      style: {\n        display: \"flex\"\n      },\n      children: [\"Portfolio - \", /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"8px\",\n          marginBottom: \"2px\"\n        },\n        className: \"textPrimary headline six\",\n        children: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navBarContainer \" + getTheme,\n      children: navButtons.map(y => {\n        return /*#__PURE__*/_jsxDEV(NavButton, {\n          options: y,\n          openContext: openContext,\n          setOpenContext: setOpenContext\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NavBar, \"RUZyDs34wXM5a2QOAkiFm2nHtrs=\");\n\n_c = NavBar;\nexport default NavBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavBar\");","map":{"version":3,"sources":["C:/Users/Justin/Documents/GitHub/Portfolio_Website/src/components/NavBar/NavBar.tsx"],"names":["useContext","useMemo","useState","ThemeManagerContext","GlobalThemes","NavButton","NavBar","isTopBar","themeManager","theme","setThemeContext","spookyNavButtons","safariNavButtons","eightiesNavButtons","dystopiaNavButtons","defaultNavButtons","label","setLabel","openContext","setOpenContext","navButtons","setNavButtons","icon","themeChanger","Resume","route","contextItems","Enterprise","Spooky","Sales","setIcons","icons","tempButtons","forEach","i","getTheme","Safari","Arcade","Dystopia","display","marginLeft","marginBottom","map","y"],"mappings":"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","sourcesContent":["import { useContext, useMemo, useState } from \"react\";\r\nimport { ThemeManagerContext } from \"../../App\";\r\nimport { GlobalThemes } from \"../../ThemeManager\";\r\nimport NavButton, { NavButtonOptions } from \"../NavButton/NavButton\";\r\nimport \"./NavBar.scss\";\r\nconst NavBar = ({ isTopBar }: { isTopBar?: boolean }) => {\r\n  const { themeManager, theme, setThemeContext } =\r\n    useContext(ThemeManagerContext);\r\n  const spookyNavButtons: string[] = [\"Skull\", \"Bat\"];\r\n  const safariNavButtons: string[] = [\"Sun\", \"Bug\"];\r\n  const eightiesNavButtons: string[] = [\"Atari\", \"Invader\"];\r\n  const dystopiaNavButtons: string[] = [\"Atari\", \"SportsEsports\"];\r\n  const defaultNavButtons: string[] = [\"Home\", \"Themes\"];\r\n  const [label, setLabel] = useState(\"Webpage\");\r\n  const [openContext, setOpenContext] = useState<boolean>(false);\r\n  const [navButtons, setNavButtons] = useState<NavButtonOptions[]>([\r\n    {\r\n      icon: \"Resume\",\r\n      label: \"Resume\",\r\n      themeChanger: GlobalThemes.Resume,\r\n      route: \"/resume\",\r\n    },\r\n\r\n    {\r\n      icon: \"Themes\",\r\n\r\n      label: \"Themes Page\",\r\n      contextItems: [\r\n        {\r\n          icon: \"Projects\",\r\n          label: \"Enterprise\",\r\n          themeChanger: GlobalThemes.Enterprise,\r\n          route: \"/enterprise\",\r\n        },\r\n        {\r\n          icon: \"Bat\",\r\n          label: \"Haunted House\",\r\n          themeChanger: GlobalThemes.Spooky,\r\n          route: \"/hauntedHouse\",\r\n        },\r\n\r\n        {\r\n          icon: \"Sales\",\r\n          label: \"Sales\",\r\n          themeChanger: GlobalThemes.Sales,\r\n          route: \"/sales\",\r\n        },\r\n        /*\r\n        {\r\n          icon: \"Paw\",\r\n          label: \"Safari Learning\",\r\n          themeChanger: GlobalThemes.Safari,\r\n          route: \"/safari\",\r\n        },\r\n        {\r\n          icon: \"SportsEsports\",\r\n          label: \"80s Arcade\",\r\n          themeChanger: GlobalThemes.Arcade,\r\n          route: \"/arcade\",\r\n        },\r\n        {\r\n          icon: \"Skull\",\r\n          label: \"Dystopia\",\r\n          themeChanger: GlobalThemes.Dystopia,\r\n          route: \"/dystopia\",\r\n        },\r\n        */\r\n      ],\r\n    },\r\n  ]);\r\n  const setIcons = (icons: string[]) => {\r\n    let tempButtons = navButtons;\r\n    icons.forEach((icon, i) => {\r\n      tempButtons[i][\"icon\"] = icon;\r\n    });\r\n    setNavButtons(tempButtons);\r\n  };\r\n  const getTheme = useMemo(() => {\r\n    switch (theme) {\r\n      case GlobalThemes.Spooky:\r\n        setLabel(\"Haunted House Tours\");\r\n        setIcons(spookyNavButtons);\r\n        break;\r\n      case GlobalThemes.Safari:\r\n        setLabel(\"Safari Learning Center\");\r\n        setIcons(safariNavButtons);\r\n        break;\r\n      case GlobalThemes.Arcade:\r\n        setLabel(\"80s Arcade\");\r\n        setIcons(eightiesNavButtons);\r\n        break;\r\n      case GlobalThemes.Dystopia:\r\n        setLabel(\"Dystopia\");\r\n        setIcons(dystopiaNavButtons);\r\n        break;\r\n      case GlobalThemes.Resume:\r\n      case GlobalThemes.Enterprise:\r\n      default:\r\n        setLabel(theme);\r\n        setIcons(defaultNavButtons);\r\n        break;\r\n    }\r\n    return theme;\r\n  }, [theme]);\r\n\r\n  return (\r\n    <div className={\"navBar horizontal \"}>\r\n      <div\r\n        className=\"headline six navBarLabel textTitle\"\r\n        style={{ display: \"flex\" }}\r\n      >\r\n        {\"Portfolio - \"}\r\n        <div\r\n          style={{ marginLeft: \"8px\", marginBottom: \"2px\" }}\r\n          className=\"textPrimary headline six\"\r\n        >\r\n          {theme}\r\n        </div>\r\n      </div>\r\n      <div className={\"navBarContainer \" + getTheme}>\r\n        {navButtons.map((y) => {\r\n          return (\r\n            <NavButton\r\n              options={y}\r\n              openContext={openContext}\r\n              setOpenContext={setOpenContext}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default NavBar;\r\n"]},"metadata":{},"sourceType":"module"}