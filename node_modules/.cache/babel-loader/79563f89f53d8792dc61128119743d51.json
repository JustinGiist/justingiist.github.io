{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Justin\\\\Documents\\\\GitHub\\\\justingiist.github.io\\\\src\\\\components\\\\NavButton\\\\NavButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, forwardRef, useContext, useEffect, useState } from \"react\";\nimport { ThemeManagerContext } from \"../../App\";\nimport { GlobalThemes } from \"../../ThemeManager\";\nimport Icon from \"../Icon/Icon\";\nimport \"./NavButton.scss\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NavButton = ({\n  options,\n  openContext,\n  setOpenContext\n}) => {\n  _s();\n\n  const {\n    themeManager,\n    theme,\n    setThemeContext\n  } = useContext(ThemeManagerContext);\n  const contextRef = /*#__PURE__*/createRef();\n  const navigate = useNavigate();\n  const [isHover, setIsHover] = useState(false);\n  let buttonRef = /*#__PURE__*/createRef();\n\n  const innerNavigate = () => {\n    setOpenContext(false);\n    navigate(\"../\" + options.route, {\n      replace: true\n    });\n  };\n\n  var icon = theme === GlobalThemes.Safari ? \"Paw\" : options.icon;\n\n  const resize = () => {\n    if (options.contextItems && openContext === true) {\n      var buttonRect = buttonRef.current.getBoundingClientRect();\n\n      if (contextRef.current && buttonRect) {\n        contextRef.current.style.width = buttonRect.width.toString() + \"px\";\n        contextRef.current.style.left = buttonRect.left.toString() + \"px\";\n        contextRef.current.style.top = (buttonRect.top + buttonRect.height).toString() + \"px\";\n      }\n    }\n  };\n\n  useEffect(() => {\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  });\n  const ContextMenu = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"navButtonContextContainer slide0\",\n    children: options.contextItems && options.contextItems.map((item, i) => {\n      item.secondary = true;\n      return /*#__PURE__*/_jsxDEV(NavButton, {\n        options: item,\n        openContext: openContext,\n        setOpenContext: setOpenContext\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this));\n  const DefaultButton = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \" basicNavButton \" + (options.secondary === true && \" secondary\") + (openContext && options.contextItems ? \" open\" : \"\") + (theme === options.route ? \" active\" : \"\"),\n    onClick: () => {\n      if (options.contextItems) {\n        setOpenContext(!openContext);\n      } else {\n        innerNavigate();\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navButtonLabel headline six\",\n      children: options.label || options.route\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), options.contextItems && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navButtonDropdownArrow \" + (openContext ? \"flip\" : \"\"),\n      onClick: () => {\n        setOpenContext(!openContext);\n      },\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        icon: \"ArrowDropDown\",\n        color: theme,\n        fontSize: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DefaultButton, {\n      ref: buttonRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 8\n    }, this), openContext === true && options.contextItems && /*#__PURE__*/_jsxDEV(ContextMenu, {\n      ref: contextRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(NavButton, \"fC96VlXB6Hx+VIBlsKnz9t5WXg8=\", false, function () {\n  return [useNavigate];\n});\n\n_c = NavButton;\nexport default NavButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavButton\");","map":{"version":3,"sources":["C:/Users/Justin/Documents/GitHub/justingiist.github.io/src/components/NavButton/NavButton.tsx"],"names":["React","createRef","forwardRef","useContext","useEffect","useState","ThemeManagerContext","GlobalThemes","Icon","useNavigate","NavButton","options","openContext","setOpenContext","themeManager","theme","setThemeContext","contextRef","navigate","isHover","setIsHover","buttonRef","innerNavigate","route","replace","icon","Safari","resize","contextItems","buttonRect","current","getBoundingClientRect","style","width","toString","left","top","height","window","addEventListener","removeEventListener","ContextMenu","props","ref","map","item","i","secondary","DefaultButton","label"],"mappings":"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","sourcesContent":["import React, {\r\n  createRef,\r\n  Dispatch,\r\n  forwardRef,\r\n  SetStateAction,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport { ThemeManagerContext } from \"../../App\";\r\nimport { GlobalThemes } from \"../../ThemeManager\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport \"./NavButton.scss\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nexport interface NavButtonOptions {\r\n  icon?: string;\r\n  label?: string;\r\n  contextItems?: NavButtonOptions[];\r\n  secondary?: boolean;\r\n  route?: GlobalThemes;\r\n}\r\nconst NavButton = ({\r\n  options,\r\n  openContext,\r\n  setOpenContext,\r\n}: {\r\n  options: NavButtonOptions;\r\n  openContext: boolean;\r\n  setOpenContext: Dispatch<SetStateAction<boolean>>;\r\n}) => {\r\n  const { themeManager, theme, setThemeContext } =\r\n    useContext(ThemeManagerContext);\r\n  const contextRef = createRef<any>();\r\n  const navigate = useNavigate();\r\n  const [isHover, setIsHover] = useState(false);\r\n  let buttonRef = createRef<any>();\r\n  const innerNavigate = () => {\r\n    setOpenContext(false);\r\n    navigate(\"../\" + options.route, { replace: true });\r\n  };\r\n  var icon = theme === GlobalThemes.Safari ? \"Paw\" : options.icon;\r\n  const resize = () => {\r\n    if (options.contextItems && openContext === true) {\r\n      var buttonRect = buttonRef.current.getBoundingClientRect();\r\n      if (contextRef.current && buttonRect) {\r\n        contextRef.current.style.width = buttonRect.width.toString() + \"px\";\r\n        contextRef.current.style.left = buttonRect.left.toString() + \"px\";\r\n        contextRef.current.style.top =\r\n          (buttonRect.top + buttonRect.height).toString() + \"px\";\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    resize();\r\n    window.addEventListener(\"resize\", resize);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resize);\r\n    };\r\n  });\r\n  const ContextMenu = forwardRef<any>((props, ref) => (\r\n    <div ref={ref} className={\"navButtonContextContainer slide0\"}>\r\n      {options.contextItems &&\r\n        options.contextItems.map((item, i) => {\r\n          item.secondary = true;\r\n          return (\r\n            <NavButton\r\n              key={i}\r\n              options={item}\r\n              openContext={openContext}\r\n              setOpenContext={setOpenContext}\r\n            />\r\n          );\r\n        })}\r\n    </div>\r\n  ));\r\n  const DefaultButton = forwardRef<any>((props, ref) => (\r\n    <div\r\n      ref={ref}\r\n      className={\r\n        \" basicNavButton \" +\r\n        (options.secondary === true && \" secondary\") +\r\n        (openContext && options.contextItems ? \" open\" : \"\") +\r\n        (theme === options.route ? \" active\" : \"\")\r\n      }\r\n      onClick={() => {\r\n        if (options.contextItems) {\r\n          setOpenContext(!openContext);\r\n        } else {\r\n          innerNavigate();\r\n        }\r\n      }}\r\n    >\r\n      <div className={\"navButtonLabel headline six\"}>\r\n        {options.label || options.route}\r\n      </div>\r\n      {options.contextItems && (\r\n        <div\r\n          className={\"navButtonDropdownArrow \" + (openContext ? \"flip\" : \"\")}\r\n          onClick={() => {\r\n            setOpenContext(!openContext);\r\n          }}\r\n        >\r\n          <Icon icon=\"ArrowDropDown\" color={theme} fontSize={16} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      {<DefaultButton ref={buttonRef} />}\r\n      {openContext === true && options.contextItems && (\r\n        <ContextMenu ref={contextRef} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default NavButton;\r\n"]},"metadata":{},"sourceType":"module"}