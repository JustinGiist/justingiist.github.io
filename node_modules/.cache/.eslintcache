[{"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\index.tsx":"1","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\reportWebVitals.ts":"2","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\App.tsx":"3","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\ThemeManager.tsx":"4","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\RenderComponent\\RenderComponent.tsx":"5","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\testPage.tsx":"6","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\BezierBackground\\DesignBackground.tsx":"7","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\OverlayControl\\OverlayControl.tsx":"8","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\SpookyTheme.tsx":"9","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\SideBar\\SideBar.tsx":"10","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\ResumePage\\ResumePage.tsx":"11","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\EnterpriseTheme\\EnterpriseTheme.tsx":"12","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\ContactPage\\ContactPage.tsx":"13","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\SidebarV2\\SidebarV2.tsx":"14","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\FragmentsPage\\FragmentsPage.tsx":"15","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\SalesTheme\\SalesTheme.tsx":"16","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\TopbarV2\\TopbarV2.tsx":"17","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\MusicPage\\MusicPage.tsx":"18","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\BlackRed\\BlackRed.tsx":"19","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\NotePage\\NotePage.tsx":"20","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\PageLayout\\SwitchInput.tsx":"21","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\CardCalculator\\CardCalculator.tsx":"22","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\Icon\\Icon.tsx":"23","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\BezierBackground\\ParallaxBackground.tsx":"24","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\Rainimation\\Rainimation.tsx":"25","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\CartComponent.tsx":"26","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\ResumePage\\ThreeD.tsx":"27","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\FragmentsPage\\FragmentsEnumsAndI.tsx":"28","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\PageLayout\\PageLayout.tsx":"29","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\TabsComponent\\TabsComponent.tsx":"30","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\CloseComponent\\CloseComponent.tsx":"31","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\NotePage\\components\\NotesComponent\\NotesComponent.tsx":"32","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\utils\\objectUtils.js":"33","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\PageLayout\\UndoRedoComponent.tsx":"34","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\PageLayout\\ErrorBoundary.jsx":"35","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\PageLayout\\AnimatedCheckmark\\AnimatedCheckmark.jsx":"36","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\PageLayout\\StopNavigation.tsx":"37","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\Modal\\ModalContext.tsx":"38","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\Modal\\Modal.tsx":"39","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\EnterpriseTheme\\EnterpriseCharts.tsx":"40","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\YetiPage\\YetiPage.tsx":"41","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\Carousel\\Carousel.tsx":"42","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\HeroPageLayout\\HeroPageLayout.tsx":"43","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\HeroPageLayout\\SwitchHeroComponent.tsx":"44","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\DesignerPage.tsx":"45"},{"size":517,"mtime":1659652947481,"results":"46","hashOfConfig":"47"},{"size":440,"mtime":1648860274804,"results":"48","hashOfConfig":"47"},{"size":3272,"mtime":1679150301755,"results":"49","hashOfConfig":"47"},{"size":17894,"mtime":1677381339214,"results":"50","hashOfConfig":"47"},{"size":6370,"mtime":1677386714575,"results":"51","hashOfConfig":"47"},{"size":773,"mtime":1675816371175,"results":"52","hashOfConfig":"47"},{"size":30544,"mtime":1663021630155,"results":"53","hashOfConfig":"47"},{"size":357,"mtime":1663021400153,"results":"54","hashOfConfig":"47"},{"size":21678,"mtime":1663018861127,"results":"55","hashOfConfig":"47"},{"size":9627,"mtime":1663020956598,"results":"56","hashOfConfig":"47"},{"size":11044,"mtime":1678495190502,"results":"57","hashOfConfig":"47"},{"size":9813,"mtime":1673209885297,"results":"58","hashOfConfig":"47"},{"size":3567,"mtime":1676905444154,"results":"59","hashOfConfig":"47"},{"size":2436,"mtime":1679151216602,"results":"60","hashOfConfig":"47"},{"size":5509,"mtime":1663020210754,"results":"61","hashOfConfig":"47"},{"size":18387,"mtime":1668955657308,"results":"62","hashOfConfig":"47"},{"size":904,"mtime":1660223855878,"results":"63","hashOfConfig":"47"},{"size":7940,"mtime":1673212013358,"results":"64","hashOfConfig":"47"},{"size":5395,"mtime":1669305351659,"results":"65","hashOfConfig":"47"},{"size":455,"mtime":1662519780007,"results":"66","hashOfConfig":"47"},{"size":21620,"mtime":1670792709732,"results":"67","hashOfConfig":"47"},{"size":2651,"mtime":1669304557982,"results":"68","hashOfConfig":"47"},{"size":5959,"mtime":1676932035951,"results":"69","hashOfConfig":"47"},{"size":6073,"mtime":1648860274762,"results":"70","hashOfConfig":"47"},{"size":2923,"mtime":1663021200631,"results":"71","hashOfConfig":"47"},{"size":5306,"mtime":1679152406435,"results":"72","hashOfConfig":"47"},{"size":14425,"mtime":1676902737457,"results":"73","hashOfConfig":"47"},{"size":59989,"mtime":1663020247641,"results":"74","hashOfConfig":"47"},{"size":15426,"mtime":1679152446293,"results":"75","hashOfConfig":"47"},{"size":943,"mtime":1660403135647,"results":"76","hashOfConfig":"47"},{"size":512,"mtime":1654204010520,"results":"77","hashOfConfig":"47"},{"size":7270,"mtime":1666546707418,"results":"78","hashOfConfig":"47"},{"size":773,"mtime":1665852752622,"results":"79","hashOfConfig":"47"},{"size":1800,"mtime":1669673833055,"results":"80","hashOfConfig":"47"},{"size":1342,"mtime":1660960047739,"results":"81","hashOfConfig":"47"},{"size":976,"mtime":1668192245407,"results":"82","hashOfConfig":"47"},{"size":858,"mtime":1668440018726,"results":"83","hashOfConfig":"47"},{"size":194,"mtime":1668950638233,"results":"84","hashOfConfig":"47"},{"size":3995,"mtime":1668953757009,"results":"85","hashOfConfig":"47"},{"size":5104,"mtime":1669300802670,"results":"86","hashOfConfig":"47"},{"size":9672,"mtime":1670792907686,"results":"87","hashOfConfig":"47"},{"size":873,"mtime":1670788220559,"results":"88","hashOfConfig":"47"},{"size":930,"mtime":1675294520795,"results":"89","hashOfConfig":"47"},{"size":5522,"mtime":1678484930064,"results":"90","hashOfConfig":"47"},{"size":4528,"mtime":1678485599239,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"10h5kti",{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"95"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"95"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"95"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\index.tsx",[],[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\App.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\ThemeManager.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\RenderComponent\\RenderComponent.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\testPage.tsx",["238","239","240","241","242","243","244","245","246","247","248","249","250"],[],"import { useMemo } from \"react\";\r\nimport CardCalculator from \"../components/CardCalculator/CardCalculator\";\r\nimport CurveLayout from \"../components/CurveLayout/CurveLayout\";\r\nimport HeroPageLayout, {\r\n  iHeroPageLayout,\r\n} from \"../components/HeroPageLayout/HeroPageLayout\";\r\nimport Visualizer from \"../components/Visualizer/Visualizer\";\r\nimport chocolate2 from \"../assets/chocolate2.jpg\";\r\nimport chocolate3 from \"../assets/chocolate3.jpg\";\r\nimport swoosh1 from \"../assets/Swoosh2.png\";\r\nimport swoosh3 from \"../assets/Swoosh.png\";\r\nimport phone1 from \"../assets/phone-1.jpg\";\r\nimport phone2 from \"../assets/phone-2.jpg\";\r\nimport phone3 from \"../assets/Three-Phones-Mockup.png\";\r\n\r\nconst TestPage = () => {\r\n  return <div>Hello World</div>;\r\n};\r\nexport default TestPage;\r\n","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\BezierBackground\\DesignBackground.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\OverlayControl\\OverlayControl.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\SpookyTheme.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\SideBar\\SideBar.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\ResumePage\\ResumePage.tsx",["251","252","253"],[],"import { Suspense, useMemo } from \"react\";\r\nimport \"./ResumePage.scss\";\r\nimport tacoImage from \"../../../assets/taco.jpg\";\r\nimport hallowImage from \"../../../assets/hallow.jpg\";\r\nimport threePhones from \"../../../assets/Three-Phones-Mockup.png\";\r\nimport racingPhones from \"../../../assets/Racing-Mockup.png\";\r\nimport dashboardMockup from \"../../../assets/Dashboard_mockup.png\";\r\nimport ParallaxBackground from \"../../../components/BezierBackground/ParallaxBackground\";\r\nimport { GlobalThemes } from \"../../../ThemeManager\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport OverlayControl from \"../../../components/OverlayControl/OverlayControl\";\r\nimport HeroPageLayout, { iHeroPageLayout } from \"../../../components/HeroPageLayout/HeroPageLayout\";\r\nconst ThreeDComponentLazy = React.lazy(() => import(\"./ThreeD\"));\r\nconst ResumePage = () => {\r\n  const navigate = useNavigate();\r\n  const experienceList: any[] = [\r\n    \"As Lead UX Designer at a Tech Consulting Firm, I oversaw many Companies & Clients. Responsibilities included creating Figma mock-ups, documenting user-flows and developing enterprise-level production-ready features. I handled end-to-end design, implementation and coordination with multiple departments within each business.\",\r\n    <div>Redesigned <a href=\"https://www.tigerpistol.com/brand-platform-overview/\" target=\"_blank\" rel=\"noopener noreferrer\">TigerPistol's DIFY</a> Advertising Platform, improving mobile friendliness, completely refactoring old code base to React, enhancing internal component libraries, reducing CSS by 50%, and developed a brand new Editor System (The main User Interface behind their Ad Platform).</div>,\r\n    <div>Developed Order Software for <a href=\"https://www.livantaqio.com/en\" target=\"_blank\" rel=\"noopener noreferrer\">Livanta</a> that enabled contractors to create in-house requisitions that flowed through an Approval System. The software also automatically processed the order, generated all relevant tax forms, receipts, and billed company accounts.</div>,\r\n    \"Developed the UI/UX Frontend Experience for a Fintech Investment SPA. Built a React & React-Native Solution that split logic and display codebases.\",\r\n    \"Using SyncFusion XLISO excel conversion library, converted financial data into Excel Government Tax Documents. Simplifying a week-long process, to a click of a button.\"\r\n  ];\r\n  const languagesList: string[] = [\r\n    \"JavaScript\",\r\n    \"TypeScript\",\r\n    \"HTML5\",\r\n    \"SCSS\",\r\n    \"C#\",\r\n    \"SQL\",\r\n    \"KefirJS\",\r\n    \"XAML\",\r\n    \".Net Core\",\r\n    \"C++\"\r\n  ];\r\n  const techList: string[] = [\r\n    \"React\",\r\n    \"React-Native\",\r\n    \"Angular\",\r\n    \"Vue.js\",\r\n    \"Node.js\",\r\n    \"Three.js\",\r\n    \"D3.js\",\r\n    \"WebGL\",\r\n    \"ASP.NET\",\r\n    \"Redis\",\r\n    \"Docker\",\r\n    \"WPF\",\r\n    \"Material-Ui\",\r\n    \"SSMS\",\r\n    \"AWS\",\r\n    \"Microsoft Suite\",\r\n    \"Xamarin\",\r\n    \"Xamarin-Forms\",\r\n    \"MySQL\",\r\n    \"Ableton Live\",\r\n    \"Google API\",\r\n    \"Chart.js\",\r\n    \"Syncfusion\",\r\n    \"PDF.js\",\r\n    \"Azure\",\r\n    \"XlsIO\",\r\n    \"PostGres\",\r\n    \"Storybook\",\r\n    \"Knockout\"\r\n  ];\r\n  const experienceHeroPageLayout: iHeroPageLayout = useMemo(\r\n    () => ({\r\n      components: [\r\n        {\r\n          label: \"Experience\",\r\n          id: \"experience\",\r\n          type: \"container\",\r\n          commonProps: {\r\n            className: 'card gap24',\r\n            layoutClassName: 'flexColumn gap16'\r\n          },\r\n          iconProps: {\r\n            icon: 'ShootingStar',\r\n            className: 'float-top-right resume-card-icon'\r\n          },\r\n          components: experienceList.map((experience, i) => ({\r\n              id: `experience-${i}`,\r\n              body: experience,\r\n              type: \"text\",\r\n              commonProps: {\r\n                className: 'indent-bar'\r\n              }\r\n          }))\r\n        }\r\n      ]\r\n    }),\r\n    []\r\n  );\r\n  const languagesHeroPageLayout: iHeroPageLayout = useMemo(\r\n    () => ({\r\n      components: [\r\n        {\r\n          label: \"Languages\",\r\n          id: \"language\",\r\n          type: \"container\",\r\n          commonProps: {\r\n            className: 'card gap24',\r\n            layoutClassName: 'flex-block-lock'\r\n          },\r\n          iconProps: {\r\n            icon: 'Languages',\r\n            className: 'float-top-right resume-card-icon'\r\n          },\r\n          components: languagesList.map((lang, i) => ({\r\n              id: `language-${i}`,\r\n              body: lang,\r\n              type: \"text\",\r\n          }))\r\n        }\r\n      ]\r\n    }),\r\n    []\r\n  );\r\n  const techHeroPageLayout: iHeroPageLayout = useMemo(\r\n    () => ({\r\n      components: [\r\n        {\r\n          label: \"Technology\",\r\n          id: \"tech\",\r\n          type: \"container\",\r\n          commonProps: {\r\n            className: 'card gap24',\r\n            layoutClassName: 'flex-block-lock'\r\n          },\r\n          iconProps: {\r\n            icon: 'Tech',\r\n            className: 'float-top-right resume-card-icon'\r\n          },\r\n          components: techList.map((tech, i) => ({\r\n              id: `tech-${i}`,\r\n              body: tech,\r\n              type: \"text\",\r\n          }))\r\n        }\r\n      ]\r\n    }),\r\n    []\r\n  );\r\n  const project1HeroPageLayout: iHeroPageLayout = useMemo(\r\n    () => ({\r\n      components: [\r\n        {\r\n          label: \"Tacopocalypse\",\r\n          subLabel: \"2016\",\r\n          body: \"Contract Game project with Cherry Pie Games. Produced Foley Sound Design, Mixed and Edited all tracks. Mixed in Ableton Live and recorded using a range of field microphones.\",\r\n          id: \"project-1\",\r\n          type: \"container\",\r\n          onClick: () => {\r\n            window.open('https://store.steampowered.com/app/416530/Tacopocalypse/', \"_blank\");\r\n          },\r\n          commonProps: {\r\n            className: 'card',\r\n          },\r\n          components: [\r\n            {\r\n              id: 'image-taco',\r\n              commonProps: {\r\n                className: 'image',\r\n                style: {\r\n                  height: 240,\r\n                  backgroundImage: `url(${tacoImage})`\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }),\r\n    []\r\n  );\r\n  const project2HeroPageLayout: iHeroPageLayout = useMemo(\r\n    () => ({\r\n      components: [\r\n        {\r\n          label: \"Hallow\",\r\n          subLabel: \"2015\",\r\n          body: \"48 Hour Spooky Game Jam Winner using Leap Motion Controller from UltraLeap. Created immersive screams and haunting sounds. Mixed in Ableton Live and recorded using a range of field microphones.\",\r\n          id: \"project-2\",\r\n          type: \"container\",\r\n          onClick: () => {\r\n            window.open('https://killerham.itch.io/hollow', \"_blank\");\r\n          },\r\n          commonProps: {\r\n            className: 'card',\r\n          },\r\n          components: [\r\n            {\r\n              id: 'image-hallow',\r\n              commonProps: {\r\n                className: 'image',\r\n                style: {\r\n                  height: 240,\r\n                  backgroundImage: `url(${hallowImage})`\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }),\r\n    []\r\n  );\r\n  const project3HeroPageLayout: iHeroPageLayout = useMemo(\r\n    () => ({\r\n      components: [\r\n        {\r\n          id: \"mockups\",\r\n          type: \"container\",\r\n          components: [\r\n            {\r\n              id: 'phone-mockup-1',\r\n              commonProps: {\r\n                className: 'image',\r\n                style: {\r\n                  height: 360,\r\n                  backgroundImage: `url(${threePhones})`\r\n                }\r\n              }\r\n            },\r\n            {\r\n              id: 'phone-mockup-2',\r\n              commonProps: {\r\n                className: 'image',\r\n                style: {\r\n                  height: 360,\r\n                  backgroundImage: `url(${racingPhones})`\r\n                }\r\n              }\r\n            },\r\n            {\r\n              id: 'phone-mockup-2',\r\n              commonProps: {\r\n                className: 'image',\r\n                style: {\r\n                  height: 460,\r\n                  backgroundImage: `url(${dashboardMockup})`\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }),\r\n    []\r\n  );\r\n  return (\r\n    <>\r\n      <div className=\"parallax_layer two\">\r\n        <div className=\"hero-section White\"></div>\r\n        <div className=\"hero-section White\">\r\n          <ParallaxBackground />\r\n        </div>\r\n        <div className=\"hero-section White\">\r\n          <ParallaxBackground />\r\n        </div>\r\n        <div className=\"hero-section White\">\r\n          <ParallaxBackground />\r\n        </div>\r\n      </div>\r\n      <div className=\"parallax_layer one\">\r\n        <div className=\"hero-section column\" style={{ background: \"black\" }}>\r\n          <Suspense fallback={<OverlayControl />}>\r\n            <div className=\"titleContainer\">\r\n              <div className=\"flex column\">\r\n                <h1>\r\n                  Justin Gist\r\n                </h1>\r\n                <h2>\r\n                  UI/UX Designer\r\n                </h2>\r\n              </div>\r\n            </div>\r\n            {<ThreeDComponentLazy />}\r\n          </Suspense>\r\n        </div>\r\n        <div className=\"heroGradient\" />\r\n        <div className=\"hero-section B\">\r\n          <div className=\"center\">\r\n            <HeroPageLayout heroPageLayout={experienceHeroPageLayout} />\r\n          </div>\r\n        </div>\r\n        <div className=\"hero-section B\">\r\n          <div className=\"center\">\r\n            <HeroPageLayout heroPageLayout={languagesHeroPageLayout} />\r\n          </div>\r\n        </div>\r\n        <div className=\"hero-section B\">\r\n          <div className=\"center\">\r\n            <HeroPageLayout heroPageLayout={techHeroPageLayout} />\r\n          </div>\r\n        </div>\r\n        <h1 style={{ marginTop: 120, marginBottom: -60 }} className=\"text-sub-headline\">Mockups</h1>\r\n        <div className=\"hero-section B\">\r\n          <div className=\"center\">\r\n            <HeroPageLayout heroPageLayout={project3HeroPageLayout} />\r\n          </div>\r\n        </div>\r\n        <h1 style={{ marginTop: 120, marginBottom: -60 }} className=\"text-sub-headline\">Projects</h1>\r\n        <div className=\"hero-section B\">\r\n          <div className=\"center\">\r\n            <HeroPageLayout heroPageLayout={project1HeroPageLayout} />\r\n          </div>\r\n        </div>\r\n        <div className=\"hero-section B\">\r\n          <div className=\"center\">\r\n            <HeroPageLayout heroPageLayout={project2HeroPageLayout} />\r\n          </div>\r\n        </div>\r\n        <div className=\"hero-section C\" style={{ padding: 0 }}>\r\n          <div className=\"center\">\r\n            <h1 className=\"text-headline\">Like my designs?</h1>\r\n            <button\r\n              className={\"button secondary\"}\r\n              onClick={() => {\r\n                navigate(`/${GlobalThemes.Contact}`);\r\n              }}\r\n            >\r\n              Contact\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ResumePage;\r\n","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\EnterpriseTheme\\EnterpriseTheme.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\ContactPage\\ContactPage.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\SidebarV2\\SidebarV2.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\FragmentsPage\\FragmentsPage.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\SalesTheme\\SalesTheme.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\TopbarV2\\TopbarV2.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\MusicPage\\MusicPage.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\BlackRed\\BlackRed.tsx",["254","255","256"],[],"import { useCallback, useContext, useMemo, useState } from \"react\";\r\nimport ModalContext from \"../../../components/Modal/ModalContext\";\r\nimport PageLayout, { iPageLayout, mapInitialFormData } from \"../../../components/PageLayout/PageLayout\";\r\nimport { InputTypes } from \"../../../components/PageLayout/SwitchInput\";\r\nimport './BlackRed.scss';\r\nconst tempOptions = [\r\n  {\r\n    value: \"0\",\r\n    label: 'Zero'\r\n  },\r\n  {\r\n    value: \"1\",\r\n    label: 'One'\r\n  },\r\n  {\r\n    value: \"2\",\r\n    label: 'Two'\r\n  },\r\n  {\r\n    value: \"3\",\r\n    label: 'Three'\r\n  }\r\n];\r\nconst pageLayout = (openTestModal: () => void) => ({\r\n    id: 'test-0',\r\n    labelProps: {\r\n      label: 'Page Label',\r\n      subLabel: 'This is a page description that will describe what to do on this page, or what this page is about',\r\n    },\r\n    contentProps: {\r\n      layoutClassName: 'flex-block',\r\n    },\r\n    animationClass: 'Down',\r\n    inputs: [\r\n      {\r\n        id: 'test-1',\r\n        type: InputTypes.card,\r\n        label: 'Card 1',\r\n        inputProps: {\r\n          className: 'flexColumn'\r\n        },\r\n        inputs: [\r\n          {\r\n            id: 'button-modal-test',\r\n            field: 'button-modal-test',\r\n            type: InputTypes.button,\r\n            label: 'button Modal Test',\r\n            onClick: openTestModal\r\n          },\r\n          {\r\n            id: 'text',\r\n            field: 'text',\r\n            type: InputTypes.text,\r\n            label: 'text'\r\n          },\r\n          {\r\n            id: 'toggleGroup',\r\n            field: 'toggleGroup',\r\n            type: InputTypes.toggleButtonGroup,\r\n            label: 'toggleGroup',\r\n            options: tempOptions\r\n          },\r\n          {\r\n            id: 'switch',\r\n            field: 'switch',\r\n            type: InputTypes.switch,\r\n            label: 'switch'\r\n          },\r\n          {\r\n            id: 'checkbox',\r\n            field: 'checkbox',\r\n            type: InputTypes.checkbox,\r\n            label: 'checkbox'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'test-2',\r\n        type: InputTypes.card,\r\n        label: 'Card 2',\r\n        inputProps: {\r\n          className: 'flexColumn'\r\n        },\r\n        inputs: [\r\n          {\r\n            id: 'textarea input',\r\n            field: 'textarea',\r\n            type: InputTypes.textarea,\r\n            label: 'textarea input'\r\n          },\r\n          {\r\n            id: 'number input',\r\n            field: 'number',\r\n            type: InputTypes.number,\r\n            label: 'number input'\r\n          },\r\n          {\r\n            id: 'currency input',\r\n            field: 'currency',\r\n            type: InputTypes.currency,\r\n            label: 'currency input'\r\n          },\r\n          {\r\n            id: 'select input',\r\n            field: 'select',\r\n            type: InputTypes.select,\r\n            label: 'select input',\r\n            options: tempOptions\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'test',\r\n        type: InputTypes.card,\r\n        label: 'Card 3',\r\n        inputProps: {\r\n          className: 'flexColumn'\r\n        },\r\n        inputs: [\r\n          {\r\n            id: 'rating input',\r\n            field: 'rating',\r\n            type: InputTypes.rating,\r\n            label: 'rating input'\r\n          },\r\n          {\r\n            id: 'slider input',\r\n            field: 'slider',\r\n            type: InputTypes.slider,\r\n            label: 'slider input'\r\n          },\r\n          {\r\n            id: 'radio input',\r\n            field: 'radio',\r\n            type: InputTypes.radio,\r\n            label: 'radio input',\r\n            options: tempOptions\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'card-4',\r\n        type: InputTypes.card,\r\n        label: 'Card 4',\r\n        inputs: [\r\n          {\r\n            id: 'text2',\r\n            field: 'text2',\r\n            type: InputTypes.text,\r\n            label: 'text2'\r\n          },\r\n          {\r\n            id: 'toggleGroup-2',\r\n            field: 'toggleGroup-2',\r\n            type: InputTypes.toggleButtonGroup,\r\n            label: 'toggleGroup-2',\r\n            options: tempOptions\r\n          },\r\n          {\r\n            id: 'switch-2',\r\n            field: 'switch-2',\r\n            type: InputTypes.switch,\r\n            label: 'switch-2'\r\n          },\r\n          {\r\n            id: 'checkbox-2',\r\n            field: 'checkbox-2',\r\n            type: InputTypes.checkbox,\r\n            label: 'checkbox-2'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n});\r\n\r\nconst BlackRed = () => {\r\n  const { openModal, closeModal } = useContext(ModalContext);\r\n  const openTestModal = useCallback(async () => {\r\n      const result = await openModal(<div>Hello World</div>);\r\n  }, [openModal]);\r\n  const memoizedPageLayout = useMemo(() => {\r\n    return pageLayout(openTestModal);\r\n  }, [openTestModal]);\r\n  const [formData, setFormData] = useState<any>(mapInitialFormData(memoizedPageLayout, {}));\r\n  const [undoState] = useState<any>({});\r\n  const [disabledFields, setDisabledFields] = useState<any>({});\r\n  const [errorFields, setErrorFields] = useState<any>({});\r\n\r\n  return (\r\n    <PageLayout \r\n      pageLayout={memoizedPageLayout}\r\n      formData={formData}\r\n      handleFormData={setFormData}\r\n      disabledFields={disabledFields}\r\n      handleDisabled={setDisabledFields}\r\n      errorFields={errorFields}\r\n      handleError={setErrorFields}\r\n      undoState={undoState}\r\n    />\r\n  );\r\n};\r\nexport default BlackRed;","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\NotePage\\NotePage.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\PageLayout\\SwitchInput.tsx",["257","258","259","260","261","262"],[],"import { Checkbox, FormControlLabel, InputAdornment, MenuItem, Radio, RadioGroup, Rating, Slider, Switch, TextField, ToggleButton, ToggleButtonGroup } from \"@mui/material\";\r\nimport { useCallback, useMemo } from \"react\";\r\nimport { useWindowDimensions } from \"../../ThemeManager\";\r\nimport CarouselComponent from \"../Carousel/Carousel\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport AnimatedCheckmark from \"./AnimatedCheckmark/AnimatedCheckmark\";\r\nimport ErrorBoundary from \"./ErrorBoundary\";\r\nimport { ChangeType, fallbackComponent } from \"./PageLayout\";\r\nimport \"./SwitchInput.scss\";\r\n\r\nexport enum InputTypes {\r\n    text,\r\n    textOnly,\r\n    textarea,\r\n    number,\r\n    currency,\r\n    select,\r\n    multiSelect,\r\n    map,\r\n    button,\r\n    link,\r\n    checkbox,\r\n    autoComplete,\r\n    grid,\r\n    calendar,\r\n    view,\r\n    section,\r\n    switch,\r\n    toggleButtonGroup,\r\n    rating,\r\n    slider,\r\n    radio,\r\n    card,\r\n    element,\r\n    carousel\r\n}\r\nexport interface InputProps {\r\n    id: string;\r\n    type: InputTypes;\r\n    label?: string;\r\n    valueTo?: (item: any) => any; // A conversion function, that will take the inputted value and convert it to store into formData.\r\n    valueFrom?: (item: any) => any; // A conversion function, that takes the value from formData[input.field] and converts it to be useable in the component.\r\n    valueComparisonFunction?: (item: any) => string | number; // This is for validating objects, gives the validator something to validate against. Must be something that changes.\r\n    defaultValue?: any; // When data gets initially mapped, sets an initial value. Ignored if formData already has data.\r\n}\r\n\r\n// InputTypes.view, InputTypes.section\r\nexport interface InputPropsView extends InputProps {\r\n    icon?: string;\r\n    isTitle?: boolean; // Uses titleElement, which adds classes 'partner-color section-title'\r\n    subLabel?: string;\r\n    inputs?: InputProps[]; // Almost Required\r\n    className?: string;\r\n    groupClassName?: string;\r\n    layoutClassName?: string; // Class defines how container formats it's inputs.\r\n    // Default 'flexColumn'. Options ['flex', 'flexColumn', 'flexFull', 'flexBlock']\r\n}\r\n\r\n// InputType.text,\r\n// InputType.textArea,\r\n// InputType.date,\r\n// InputType.time,\r\n// InputType.datetime\r\nexport interface InputPropsCommon extends InputProps {\r\n    field?: string; // Required. This is used to track validationModel, errorFields, disabledFields, noPermissionFields and formData.\r\n    placeholder?: string;\r\n    tooltip?: string;\r\n    isRequired?: boolean; // Adds Red '*' to the label. You should still validate for required in Joi validationModel.\r\n    groupClassName?: string; // Applied to outer\r\n    className?: string;\r\n}\r\n\r\n// InputType.bool\r\nexport interface InputPropsBool extends InputProps {\r\n    field?: string; // Required. This is used to track validationModel, errorFields, disabledFields, noPermissionFields and formData.\r\n    tooltip?: string;\r\n    groupClassName?: string; // Applied to outer\r\n    className?: string;\r\n}\r\n\r\n// InputType.number\r\nexport interface InputPropsNumber extends InputPropsCommon {\r\n    min?: number;\r\n    max?: number;\r\n}\r\n\r\n// InputType.numberRange\r\nexport interface InputPropsNumberRange extends InputPropsCommon {\r\n    secondaryField: string; // Required. Same as above. Controls second field value and other triggers.\r\n    min?: number;\r\n    max?: number;\r\n    secondaryMin?: number;\r\n    secondaryMax?: number;\r\n}\r\n\r\n// InputType.richSelect,\r\n// InputType.select,\r\n// InputType.multiSelect,\r\n// InputType.groupedMultiSelect\r\nexport interface InputPropsSelect extends InputPropsCommon {\r\n    options: { id: string; label: string; }[]; // Required. ***RichSelect Does not use.\r\n    optionsSource: (searchText: string) => Promise<{ id: string; label: string; }[]>; // Async. Required. ***Select does not use.\r\n    renderOption?: (item: any) => string | JSX.Element;\r\n    renderDisplay?: (item: any) => string | JSX.Element;\r\n    getOptionValue?: (item: any) => any;\r\n    allowEmpty?: boolean;\r\n}\r\n\r\n// InputType.mapSelect\r\nexport interface InputPropsMapSelect extends InputPropsCommon {\r\n    options?: any[];\r\n    optionsSource: (searchText: string) => Promise<any>;\r\n}\r\n// If inputs, should ONLY include buttons.\r\n// If it does, it creates a buttonDropdown instead.\r\n// InputType.button\r\nexport interface InputPropsButton extends InputPropsCommon {\r\n    onClick?: (e: any) => void; // This is passed into the input on formLayout creation.\r\n    inputs?: (InputPropsButton | InputPropsLink)[]; // For button dropdown\r\n}\r\n// InputType.link\r\nexport interface InputPropsLink extends InputPropsCommon {\r\n    href?: string; // Required\r\n}\r\n\r\nexport interface SwitchInputProps {\r\n    index: number;\r\n    input: any;\r\n    formData: any;\r\n    handleChangeReducer: any;\r\n    errorFields: any;\r\n    disabledFields: any;\r\n    noPermissionFields: any;\r\n    animate: boolean;\r\n    validationSchema?: any;\r\n    undoState?: any;\r\n    handleValidation?: () => void;\r\n    animationClass?: string;\r\n}\r\n\r\nconst SwitchInput = ({\r\n    input,\r\n    index,\r\n    handleChangeReducer,\r\n    formData,\r\n    noPermissionFields,\r\n    errorFields,\r\n    validationSchema,\r\n    disabledFields,\r\n    animate,\r\n    undoState,\r\n    handleValidation,\r\n    animationClass\r\n}: SwitchInputProps) => {\r\n    // Throw on required fields. Id not required on view and section inputTypes.\r\n    if (!input.id && input.type !== InputTypes.view && input.type !== InputTypes.section) throw new Error(`Missing id for SwitchInput input ${input.field} - ${input.label}. Inputs that are NOT inputTypes.view or inputTypes.section, must have an ID property`);\r\n\r\n    // Switch Inputs are going to be used a lot, and maybe more later. This will reduce amount of code. Look at other <SwitchInputs> to see how this is used.\r\n    const switchInputProps = useMemo(() => ({\r\n        handleChangeReducer,\r\n        formData,\r\n        disabledFields,\r\n        errorFields,\r\n        validationSchema,\r\n        noPermissionFields,\r\n        handleValidation,\r\n        animate,\r\n        undoState\r\n    }), [\r\n        handleChangeReducer,\r\n        formData,\r\n        disabledFields,\r\n        errorFields,\r\n        validationSchema,\r\n        noPermissionFields,\r\n        handleValidation,\r\n        animate,\r\n        undoState\r\n    ]);\r\n    const dimensions = useWindowDimensions();\r\n    const inputKey = `editor-type-input-${input.id}`;\r\n    const inputTypeValueConversion = useCallback((e: any) => {\r\n        switch(input.type) {\r\n            case InputTypes.checkbox:\r\n            case InputTypes.switch:\r\n                return e.target.checked;\r\n            default:\r\n                return e.target.value;\r\n        }\r\n    }, [\r\n        input\r\n    ]);\r\n    const onChange = useCallback((e: any, useSecondaryField?: boolean) => {\r\n        let value = inputTypeValueConversion(e);\r\n        value = input.valueTo ? input.valueTo(value) : value;\r\n        if (input.min !== undefined) value = value < input.min ? input.min : value;\r\n        if (input.max !== undefined) value = value > input.max ? input.max : value;\r\n        const resultField = useSecondaryField && input.secondaryField ? input.secondaryField : input.field; // This is if we have a input that can handle two values, we can give it a secondaryField to input into. See inputTypes.numberRange\r\n        handleChangeReducer(ChangeType.formChange, resultField, value);\r\n    }, [\r\n        input, \r\n        handleChangeReducer,\r\n        inputTypeValueConversion\r\n    ]);\r\n\r\n    const label = useMemo(() => (\r\n        <div className={`switch-input-label flex noWrap ${input.labelProps?.className ?? 'text-sub-headline'}`} style={input.labelProps?.style}>\r\n            {input.icon && <Icon icon={input.icon} />}\r\n            {input.label && <h3>{input.label}</h3>}\r\n        </div>\r\n    ), [input]);\r\n    \r\n    // Memoized value. Uses formData and input.field to retrieve.\r\n    const value = useMemo(() => {\r\n        let newValue = formData[input.field];\r\n        if (input.valueFrom) newValue = input.valueFrom(newValue); // valueFrom is a conversion property used to convert what formData sends the input, and converts it so the input can handle it correctly.\r\n        return newValue;\r\n    }, [\r\n        formData,\r\n        input\r\n    ]);\r\n\r\n    // Checks if the input itself has changes.\r\n    const hasChanges = useMemo(() => {\r\n        if (undoState && input && input.field) {\r\n            let originalValue = undoState[input.field];\r\n            let newValue = value;\r\n            if (input.valueFrom) {\r\n                originalValue = input.valueFrom(originalValue); // Must keep conversions consistent.\r\n            }\r\n            if (input.valueComparisonFunction) {\r\n                // valueComparisonFunction is a helper property, used to allow validation to compare object values. Otherwise they won't show changes.\r\n                // if you have a value that is an object like { value: 'textValue' }, then your valueComparisonFunction would be (item) => item.value\r\n                originalValue = input.valueComparisonFunction(originalValue);\r\n                newValue = input.valueComparisonFunction(newValue);\r\n            }\r\n            return originalValue !== newValue;\r\n        }\r\n        return false;\r\n    }, [\r\n        undoState,\r\n        input,\r\n        value\r\n    ]);\r\n\r\n    // Any commmon classes that belong to all inputs will be put here. This is typical css hooks that you want to affect multiple layers down.\r\n    const additionalClasses = useMemo(() => `${input.groupClassName} ${(hasChanges) ? 'has-new-value' : ''} ${input.isRequired ? 'required' : ''}`, [\r\n        hasChanges,\r\n        input.isRequired,\r\n        input.groupClassName\r\n    ]);\r\n\r\n    // Memoized messages and booleans. This controls how the user sees the input and what messages appear on the tooltips.\r\n    const disabledMessage = useMemo(() => (!disabledFields ? undefined : disabledFields[input.field]), [input, disabledFields]); // string value, changes the tooltip and disabled the field.\r\n    const errorMessage = useMemo(() => (!errorFields ? undefined : errorFields[input.field]), [input, errorFields]); // string value, changes the tooltip and errors the field.\r\n    const noPermission = useMemo(() => (!noPermissionFields ? undefined : noPermissionFields[input.field]), [input, noPermissionFields]); // boolean value, if true, field will not even render. (Never let css control visibility, only jsx)\r\n    const memoizedTooltip= useMemo(() => dimensions.isMobile ? '' : errorMessage ?? disabledMessage ?? input.tooltip, [errorMessage, disabledMessage, input.tooltip]);\r\n\r\n    const inputElement = useMemo(() => {\r\n        // Sets defaults, we should change this later to be on the inputs themselves. Waste of code.\r\n        const renderOption = input.renderOption ?? ((item: any) => item && item.label);\r\n        const renderInputValue = input.renderOption ?? ((item: any) => item && item.label);\r\n        const getOptionValue = input.getOptionValue ?? ((item: any) => item && (item.id ?? item.value ?? item));\r\n        const renderDisplay = input.renderDisplay ?? ((item: any) => item && item.label);\r\n\r\n        switch (input.type) {\r\n            case InputTypes.carousel:\r\n                return (\r\n                    <CarouselComponent id={input.id} items={input.items} />\r\n                )\r\n            case InputTypes.textOnly:\r\n                return (\r\n                    <div\r\n                    style={input.style}\r\n                    className={`${additionalClasses}`}\r\n                    >\r\n                        {label}\r\n                    </div>\r\n                );\r\n            case InputTypes.link:\r\n                return (\r\n                    <a\r\n                    rel=\"noopener noreferrer\"\r\n                    target=\"_blank\"\r\n                    href={input.href}\r\n                    style={input.style}\r\n                    className={`link ${additionalClasses}`}\r\n                    >\r\n                        {label}\r\n                    </a>\r\n                );\r\n            case InputTypes.button:\r\n                return (\r\n                    <button \r\n                        type=\"button\" \r\n                        className={`button ${input.className} ${additionalClasses}`} \r\n                        onClick={input.onClick}\r\n                        data-tip={memoizedTooltip}\r\n                    >\r\n                        {label}\r\n                    </button>\r\n                );\r\n            case InputTypes.radio:\r\n                return (\r\n                    <>\r\n                        {input.label && <div className=\"text-input-label\">{input.label}</div>}\r\n                        <RadioGroup\r\n                            defaultValue={input.options && input.options[0].value}\r\n                            name={input.id}\r\n                        >\r\n                            {input.options && input.options.map((item: any) => (\r\n                                <FormControlLabel value={item.value} control={<Radio />} label={item.label} />\r\n                            ))}\r\n                        </RadioGroup>\r\n                    </>\r\n                );\r\n            case InputTypes.slider:\r\n                return (\r\n                    <>\r\n                        {input.label && <div className=\"text-input-label\">{input.label}</div>}\r\n                        <Slider\r\n                            size=\"small\"\r\n                            defaultValue={70}\r\n                            aria-label=\"Small\"\r\n                            valueLabelDisplay=\"auto\"\r\n                            value={value}\r\n                            onChange={(e) => onChange(e)}\r\n                        />\r\n                    </>\r\n                );\r\n            case InputTypes.rating:\r\n                return (\r\n                    <>\r\n                        {input.label && <div className=\"text-input-label\">{input.label}</div>}\r\n                        <Rating\r\n                            name={input.id}\r\n                            value={value}\r\n                            onChange={(e) => onChange(e)}\r\n                        />\r\n                    </>\r\n                );\r\n            case InputTypes.toggleButtonGroup:\r\n                return (\r\n                    <ToggleButtonGroup\r\n                        value={value}\r\n                        exclusive\r\n                        onChange={onChange}\r\n                        aria-label=\"text alignment\"\r\n                        >\r\n                            {input.options && input.options.map((button: InputPropsButton | InputPropsLink) => {\r\n                                if (!button.label) throw new Error('Button had no label');\r\n                                return (\r\n                                    <ToggleButton key={button.label} value={button.label}>\r\n                                        {button.label}\r\n                                    </ToggleButton>\r\n                                )\r\n                            })}\r\n                    </ToggleButtonGroup>\r\n                )\r\n            case InputTypes.select: \r\n                return (\r\n                    <TextField\r\n                        select\r\n                        onChange={onChange}\r\n                        label={input.label}\r\n                        value={value}\r\n                        type={'number'}\r\n                        variant=\"filled\"\r\n                        disabled={!!disabledMessage}\r\n                        helperText={memoizedTooltip}\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                        }}\r\n                        { ...input.inputProps }\r\n                        error={!!!!errorMessage}\r\n                    >\r\n                        {input.options && input.options.map((option: any) => (\r\n                            <MenuItem key={option.value} value={option.value}>\r\n                                {option.label}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                )\r\n            case InputTypes.currency:\r\n                return (\r\n                    <TextField\r\n                        onChange={onChange}\r\n                        label={input.label}\r\n                        value={value}\r\n                        type={'number'}\r\n                        variant=\"filled\"\r\n                        disabled={!!disabledMessage}\r\n                        helperText={memoizedTooltip}\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                        }}\r\n                        error={!!errorMessage}\r\n                        { ...input.inputProps }\r\n                    />\r\n                );\r\n            case InputTypes.number:\r\n                return (\r\n                    <TextField\r\n                        onChange={onChange}\r\n                        label={input.label}\r\n                        InputProps={{ inputProps: { min: input.min, max: input.max } }}\r\n                        value={value}\r\n                        type={'number'}\r\n                        variant=\"filled\"\r\n                        disabled={!!disabledMessage}\r\n                        helperText={memoizedTooltip}\r\n                        error={!!errorMessage}\r\n                        { ...input.inputProps }\r\n                    />\r\n                );\r\n            case InputTypes.switch:\r\n            case InputTypes.checkbox:\r\n                const boolProps = {\r\n                    checked: value,\r\n                    onChange: onChange,\r\n                    disabled: !!disabledMessage\r\n                };\r\n                const boolElement = input.type === InputTypes.switch ? (\r\n                    <Switch\r\n                        { ...boolProps }\r\n                    />\r\n                ) : (\r\n                    <Checkbox\r\n                        { ...boolProps }\r\n                    />\r\n                );\r\n                return (\r\n                    <FormControlLabel \r\n                        disabled={!!disabledMessage} \r\n                        control={boolElement} \r\n                        label={input.label} \r\n                    />\r\n                );\r\n            case InputTypes.textarea:\r\n            case InputTypes.text:\r\n                const isTextArea = input.type === InputTypes.textarea;\r\n                return (\r\n                    <TextField\r\n                        onChange={onChange}\r\n                        label={input.label}\r\n                        value={value}\r\n                        error={!!errorMessage}\r\n                        variant=\"filled\"\r\n                        { ...input.inputProps }\r\n                        disabled={!!disabledMessage}\r\n                        multiline={isTextArea}\r\n                        minRows={isTextArea ? 2 : 1}\r\n                        maxRows={4}\r\n                        style={input.style}\r\n                        helperText={memoizedTooltip}\r\n                    />\r\n                );\r\n            default:\r\n                return input.label;\r\n                \r\n        }\r\n    }, [\r\n        disabledMessage, \r\n        input, \r\n        onChange, \r\n        value,\r\n        dimensions.isMobile,\r\n        errorMessage,\r\n        memoizedTooltip,\r\n        additionalClasses,\r\n        label\r\n    ]);\r\n\r\n    // Creates and animated checkmark or X depending on various properties.\r\n    const floatingElement = useMemo(() => hasChanges && (\r\n        <div className=\"float-right-top\"><AnimatedCheckmark tooltip={errorMessage ? 'Has an error!' : 'Has new changes!'} useCancel={errorMessage} /></div>\r\n    ), [\r\n        hasChanges,\r\n        errorMessage\r\n    ]);\r\n    if (noPermission) return null;\r\n    const animatedStyle = {\r\n        animationDelay: `${index * 0.1}s`,\r\n        ...input.style\r\n    };\r\n    switch (input.type) {\r\n        case InputTypes.view:\r\n        case InputTypes.card:\r\n        case InputTypes.element:\r\n            return (\r\n                <div id={input.id} className={`flexColumn ${input.className} ${InputTypes[input.type].toString()} ${animationClass}`} style={animatedStyle}>\r\n                    {label}\r\n                    {input.subLabel && <div className=\"text-body\">{input.subLabel}</div>}\r\n                    <div className={input.layoutClassName ?? 'flexColumn'}>\r\n                        {input.type === InputTypes.element && input.element}\r\n                        {input.type !== InputTypes.element && input.inputs && input.inputs.map((child: any, i: number) => (\r\n                            <SwitchInput\r\n                                key={`child-switch-input-${child.id}`}\r\n                                index={i}\r\n                                input={child}\r\n                                { ...switchInputProps }\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            );\r\n        default:\r\n            return (\r\n                <ErrorBoundary\r\n                    key={inputKey}\r\n                    fallback={fallbackComponent(input)}\r\n                >\r\n                    <div \r\n                        id={input.id}\r\n                        className={`switch-input ${!!disabledMessage ? 'Mui-disabled' : ''} ${!!errorMessage ? 'Mui-error' : ''}`} data-tip={memoizedTooltip}>\r\n                        {floatingElement}\r\n                        {inputElement}\r\n                    </div>\r\n                </ErrorBoundary>\r\n            );                \r\n    }\r\n}\r\nexport default SwitchInput;","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\CardCalculator\\CardCalculator.tsx",["263","264","265"],[],"import { useCallback, useMemo, useState } from \"react\";\r\nimport PageLayout, { iPageLayout, mapInitialFormData } from \"../PageLayout/PageLayout\";\r\nimport { InputTypes } from \"../PageLayout/SwitchInput\";\r\nimport './CardCalculator.scss';\r\n\r\nenum CardValues {\r\n    zero = 32,\r\n    one = 11,\r\n    two = 12,\r\n    three = 13,\r\n    four = 14,\r\n    five = 15,\r\n    six = 16,\r\n    seven = 18,\r\n    eight = 24,\r\n    nine = 32,\r\n    healthPotion = 14,\r\n    catSwiftPotion = 16\r\n}\r\nconst initialCardValues = {\r\n    zero: 0,\r\n    one: 0,\r\n    two: 0,\r\n    three: 0,\r\n    four: 0,\r\n    five: 0,\r\n    six: 0,\r\n    seven: 0,\r\n    eight: 0,\r\n    nine: 0,\r\n    healthPotion: 0,\r\n    catSwiftPotion: 0\r\n};\r\nconst getValueFromKey = (key: string) => Object.keys(CardValues).filter(x => x === key)[0];\r\nconst formInputs = (cardData: any) => Object.keys(initialCardValues).map((key: string) => ({\r\n    id: key,\r\n    field: key,\r\n    type: InputTypes.number,\r\n    min: 0,\r\n    max: 4,\r\n    label: (\r\n        <div className=\"flex noWrap\">\r\n            <h5 style={{ textTransform: 'capitalize', minWidth: 60 }}>{CardValues[key as any]} = {cardData[key as any] * parseInt(CardValues[key as any])}</h5>\r\n            <h4 style={{ textTransform: 'capitalize', minWidth: 160 }}>{key}</h4>\r\n        </div>\r\n    )\r\n}));\r\n\r\nconst cardPageLayout = (cardData: any) => ({\r\n    id: 'card-calculator',\r\n    labelProps: {\r\n        label: 'Card Calculator',\r\n    },\r\n    containerProps: {\r\n        className: 'background-transparent',\r\n    },\r\n    inputs: formInputs(cardData),\r\n    layoutClassName: 'flexFull'\r\n});\r\nconst CardCalculator = () => {\r\n    const [cardData, setCardData] = useState<any>(mapInitialFormData(cardPageLayout(initialCardValues), initialCardValues));\r\n\r\n    const memoizedPageLayout = useMemo(() => cardPageLayout(cardData), [cardData]);\r\n    const total = useMemo(() => {\r\n        let resultTotal = 0;\r\n        let deckCount = 0;\r\n        Object.keys(cardData).forEach((key: string) => {\r\n            const value = parseInt(CardValues[key as any]);\r\n            resultTotal += cardData[key] * value;\r\n            deckCount += parseInt(cardData[key]);\r\n        });\r\n        return (\r\n            <div className=\"flex noWrap\">\r\n                <h2>{resultTotal} / {500 - resultTotal} remaining</h2>\r\n                <h5>Card Count: {deckCount}</h5>\r\n            </div>\r\n        );\r\n    },[cardData]);\r\n\r\n    return (\r\n        <div className=\"card-calculator-container flexColumn\">\r\n            {<PageLayout pageLayout={memoizedPageLayout} formData={cardData} handleFormData={setCardData} />}\r\n            {total}\r\n        </div>\r\n    );\r\n}\r\nexport default CardCalculator;","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\Icon\\Icon.tsx",["266"],[],"import SvgIcon from \"@material-ui/icons/Print\";\r\nimport { ReactComponent as Skull } from \"./skull.svg\";\r\nimport { ReactComponent as Bat } from \"./bat.svg\";\r\nimport { ReactComponent as Pumpkin } from \"./pumpkin.svg\";\r\nimport { ReactComponent as Atari } from \"./atari.svg\";\r\nimport { ReactComponent as Amazon } from \"./Amazon_logo.svg\";\r\nimport { ReactComponent as Tesla } from \"./Tesla_Motors.svg\";\r\nimport { ReactComponent as Tama } from \"./tama.svg\";\r\nimport { ReactComponent as Invader } from \"./invader.svg\";\r\nimport { ReactComponent as Coin } from \"./coin.svg\";\r\nimport { ReactComponent as ArcadeButton } from \"./arcadeButton.svg\";\r\nimport { ReactComponent as Textbox } from \"./textbox.svg\";\r\nimport { ReactComponent as Pacman } from \"./pacman.svg\";\r\nimport { ReactComponent as JoyStick } from \"./arcadeJoyStick.svg\";\r\nimport { ReactComponent as HHouse } from \"./HHouse.svg\";\r\nimport { ReactComponent as LeftTopWindow } from \"./LeftTopWindow.svg\";\r\nimport { ReactComponent as RightTopWindow } from \"./RightTopWindow.svg\";\r\nimport { ReactComponent as BottomLeftWindow } from \"./BottomLeftWindow.svg\";\r\nimport { ReactComponent as CircleWindow } from \"./CircleWindow.svg\";\r\nimport { ReactComponent as Clouds } from \"./Clouds.svg\";\r\nimport { ReactComponent as SalesLeftBackground } from \"./SalesLeftBackground.svg\";\r\nimport { ReactComponent as SalesRightBackground } from \"./SalesRightBackground.svg\";\r\nimport { ReactComponent as Squiggly } from \"./Squiggly.svg\";\r\nimport { ReactComponent as Sony } from \"./sony-logo.svg\";\r\nimport { ReactComponent as MSFT } from \"./microsoft-windows-22.svg\";\r\nimport { ReactComponent as AAPL } from \"./apple.svg\";\r\nimport { ReactComponent as JGLogo } from \"./favicon.svg\";\r\nimport DiamondIcon from \"@mui/icons-material/Diamond\";\r\nimport QuestionMarkIcon from \"@mui/icons-material/QuestionMark\";\r\nimport {\r\n  Folder,\r\n  Home,\r\n  ColorLens,\r\n  Pets,\r\n  BugReport,\r\n  WbSunny,\r\n  SportsEsports,\r\n  ArrowDropDown,\r\n  ContactPhone,\r\n  AcUnit,\r\n  Close,\r\n  PriorityHigh\r\n} from \"@material-ui/icons\";\r\nimport {\r\n  HomeOutline,\r\n  AccountCircleOutline,\r\n  WalletOutline,\r\n  CalculatorVariantOutline,\r\n  ToolboxOutline,\r\n  CheckboxBlankCircle,\r\n  Plus,\r\n  CartOutline,\r\n  BasketOffOutline,\r\n  Delete,\r\n  DotsVertical,\r\n  Facebook,\r\n  Linkedin,\r\n  Email,\r\n  Phone,\r\n  InformationOutline,\r\n  ChevronRight,\r\n  ChevronLeft,\r\n  Account,\r\n  LockOpen,\r\n  Lock,\r\n  Check,\r\n  WeatherNight,\r\n  FileTableBoxMultipleOutline,\r\n  FileChart,\r\n  ShieldCrownOutline,\r\n  ChartTree,\r\n  ChevronDoubleLeft,\r\n  ChevronDoubleRight,\r\n  Eye,\r\n  EyeOff,\r\n  CameraOutline,\r\n  FolderUploadOutline,\r\n  FileAccount,\r\n  Candycane,\r\n  Domain,\r\n  NotebookEditOutline,\r\n  Sword,\r\n  Hamburger,\r\n  TestTube,\r\n  Play,\r\n  Pause,\r\n  MusicCircleOutline,\r\n  Note,\r\n  NoteEdit,\r\n  StarOutline,\r\n  ContentSave,\r\n  UndoVariant,\r\n  RedoVariant,\r\n  Snowflake,\r\n  SnowflakeOff,\r\n  CalendarStar,\r\n  Newspaper,\r\n  AccountMultiple,\r\n  StarShootingOutline,\r\n  Web,\r\n  DesktopClassic,\r\n  CardAccountMail\r\n} from \"mdi-material-ui\";\r\n\r\nimport { GlobalThemes } from \"../../ThemeManager\";\r\nconst GetIcon: any = {\r\n  Skull: Skull,\r\n  Bat: Bat,\r\n  Pumpkin: Pumpkin,\r\n  Home: Home,\r\n  Themes: ColorLens,\r\n  Projects: Folder,\r\n  Bug: BugReport,\r\n  Paw: Pets,\r\n  Sun: WbSunny,\r\n  Atari: Atari,\r\n  SportsEsports: SportsEsports,\r\n  Tama: Tama,\r\n  ArrowDropDown: ArrowDropDown,\r\n  Invader: Invader,\r\n  Contact: CardAccountMail,\r\n  AcUnit,\r\n  HomeOutline,\r\n  AccountCircleOutline,\r\n  WalletOutline,\r\n  CalculatorVariantOutline,\r\n  ToolboxOutline,\r\n  Coin,\r\n  ArcadeButton,\r\n  Textbox,\r\n  Pacman,\r\n  PacmanCircle: CheckboxBlankCircle,\r\n  JoyStick,\r\n  HHouse,\r\n  LeftTopWindow,\r\n  RightTopWindow,\r\n  BottomLeftWindow,\r\n  CircleWindow,\r\n  Clouds,\r\n  Close,\r\n  QuestionMark: QuestionMarkIcon,\r\n  SalesLeftBackground,\r\n  SalesRightBackground,\r\n  Diamond: DiamondIcon,\r\n  Plus,\r\n  Cart: CartOutline,\r\n  Squiggly,\r\n  NoItems: BasketOffOutline,\r\n  Delete,\r\n  Context: DotsVertical,\r\n  FB: Facebook,\r\n  AMZN: Amazon,\r\n  TSLA: Tesla,\r\n  Email,\r\n  Linkedin,\r\n  Phone,\r\n  Sony,\r\n  MSFT,\r\n  AAPL,\r\n  JGLogo,\r\n  Info: InformationOutline,\r\n  ChevronRight,\r\n  ChevronLeft,\r\n  Account,\r\n  LockOpen,\r\n  Lock,\r\n  Warning: PriorityHigh,\r\n  Check,\r\n  Moon: WeatherNight,\r\n  Customers: HomeOutline,\r\n  Templates: FileTableBoxMultipleOutline,\r\n  Campaigns: ChartTree,\r\n  Reports: FileChart,\r\n  Admin: ShieldCrownOutline,\r\n  X: Close,\r\n  SidebarClose: ChevronDoubleLeft,\r\n  SidebarOpen: ChevronDoubleRight,\r\n  Eye,\r\n  EyeOff,\r\n  Upload: FolderUploadOutline,\r\n  Camera: CameraOutline,\r\n  Resume: FileAccount,\r\n  Sales: Candycane,\r\n  Enterprise: Domain,\r\n  Spooky: Skull,\r\n  Editor: NotebookEditOutline,\r\n  Fragments: Sword,\r\n  Hamburger,\r\n  Test: TestTube,\r\n  BlackRed: TestTube,\r\n  Music: MusicCircleOutline,\r\n  Play,\r\n  Pause,\r\n  List: Note,\r\n  Edit: NoteEdit,\r\n  Star: StarOutline,\r\n  Cancel: Close,\r\n  Save: ContentSave,\r\n  Undo: UndoVariant,\r\n  Redo: RedoVariant,\r\n  Yeti: Snowflake,\r\n  YetiOff: SnowflakeOff,\r\n  Events: CalendarStar,\r\n  Partners: AccountMultiple,\r\n  News: Newspaper,\r\n  Designer: Eye,\r\n  ShootingStar: StarShootingOutline,\r\n  Languages: Web,\r\n  Tech: DesktopClassic\r\n};\r\nconst Icon = ({\r\n  icon,\r\n  onclick,\r\n  fontSize,\r\n  color,\r\n  viewBox,\r\n  width,\r\n  height,\r\n  className,\r\n}: {\r\n  icon?: string;\r\n  onclick?: (e: any) => void;\r\n  fontSize?: number;\r\n  color?: GlobalThemes;\r\n  viewBox?: string;\r\n  width?: string;\r\n  height?: string;\r\n  className?: string;\r\n}) => {\r\n  const myIcon = GetIcon[icon as string];\r\n  if (!myIcon) return <div></div>;\r\n  return (\r\n    <SvgIcon\r\n      onClick={(e: any) => {\r\n        return onclick ? onclick(e) : null;\r\n      }}\r\n      width={width ?? \"100%\"}\r\n      height={height ?? \"100%\"}\r\n      viewBox={viewBox ?? \"0 0 24 24\"}\r\n      fontSize={fontSize ? \"inherit\" : \"small\"}\r\n      style={{\r\n        fontSize: fontSize ?? 24,\r\n        color: color ?? \"\",\r\n      }}\r\n      className={className}\r\n      component={myIcon}\r\n    />\r\n  );\r\n};\r\nexport default Icon;\r\n","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\BezierBackground\\ParallaxBackground.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\Rainimation\\Rainimation.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\CartComponent.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\ResumePage\\ThreeD.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\FragmentsPage\\FragmentsEnumsAndI.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\PageLayout\\PageLayout.tsx",["267","268"],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\TabsComponent\\TabsComponent.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\CloseComponent\\CloseComponent.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\NotePage\\components\\NotesComponent\\NotesComponent.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\utils\\objectUtils.js",[],[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\PageLayout\\UndoRedoComponent.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\PageLayout\\ErrorBoundary.jsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\PageLayout\\AnimatedCheckmark\\AnimatedCheckmark.jsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\PageLayout\\StopNavigation.tsx",["269","270"],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\Modal\\ModalContext.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\Modal\\Modal.tsx",["271","272","273","274"],[],"import { ThemeContext } from '@emotion/react';\r\nimport React, { useState, useCallback, useMemo, useContext } from 'react';\r\nimport { ThemeManagerContext } from '../../App';\r\nimport CloseComponent from '../CloseComponent/CloseComponent';\r\nimport Icon from '../Icon/Icon';\r\nimport ErrorBoundary from '../PageLayout/ErrorBoundary';\r\nimport './Modal.scss';\r\n\r\ninterface iModalOptions {\r\n\r\n}\r\n\r\ninterface iModal {\r\n    children: any;\r\n    handleClose: (result: any) => void;\r\n    childProps?: any;\r\n    props?: any;\r\n    modalOptions?: iModalOptions;\r\n}\r\n\r\ninterface iModalRoot {\r\n    isOpen: boolean;\r\n    activeModal: iModal;\r\n}\r\n\r\nconst modalFallbackComponent = (closeModal: () => void) => (\r\n    <div className=\"flexColumn\">\r\n        <h3>Sorry this modal is not working right now. An error report was already sent to engineering.</h3>\r\n        <button onClick={closeModal}>Close</button>\r\n    </div>\r\n)\r\n\r\nfunction ModalRoot({ isOpen, activeModal }: iModalRoot) {\r\n    const {\r\n        children,\r\n        handleClose,\r\n        childProps,\r\n        props,\r\n        modalOptions\r\n    } = activeModal;\r\n    const { theme } = useContext(ThemeManagerContext);\r\n    const handleModalClose = useCallback(async (result) => {\r\n        handleClose(result);\r\n    }, [handleClose]);\r\n    const genericClasses = `modal-container ${theme}`;\r\n    const memoizedClasses = !props ? genericClasses : `${genericClasses} ${props.className}`;\r\n    const memoizedContentClasses = !props ? 'modal-content' : `modal-content ${props.contentClassName || ''}`;\r\n    const memoizedStyle = !props ? {} : props.style;\r\n    const childrenWithProps = React.Children.map(children, child => {\r\n        // Checking isValidElement is the safe way and avoids a\r\n        // typescript error too.\r\n        if (React.isValidElement(child)) {\r\n        return React.cloneElement(child, { ...childProps, onClose: handleModalClose });\r\n        }\r\n        return child;\r\n    });\r\n    if (!children) return null;\r\n    return !isOpen ? null : (\r\n        <div className={memoizedClasses} style={memoizedStyle}>\r\n            <ErrorBoundary fallbackComponent={modalFallbackComponent}>\r\n                <div id=\"modal-content\" className={memoizedContentClasses}>\r\n                    {<CloseComponent action={() => handleModalClose(null)} />}\r\n                    {childrenWithProps}\r\n                </div>\r\n            </ErrorBoundary>\r\n        </div>\r\n    );\r\n}\r\ninterface iUseModal {\r\n    ModalRoot: React.ElementType,\r\n    openModal: (children: any, childProps: any, modalOptions: any) => Promise<any>,\r\n    closeModal: (result: any) => void\r\n}\r\nconst useModal = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [activeModal, setActiveModal] = useState<iModal | undefined>(undefined);\r\n\r\n    const modalRoot = useMemo(() => !activeModal ? null : (\r\n        <ModalRoot\r\n            isOpen={isOpen}\r\n            activeModal={activeModal}\r\n        />\r\n    ), [isOpen, activeModal]);\r\n\r\n    const openModal = useCallback((\r\n        children, \r\n        childProps, \r\n        modalOptions\r\n    ) => new Promise((resolve) => {\r\n        if (!modalRoot) {\r\n            // enqueueSnackbar('There is no modal root configured for this modal. Please add it to your react render');\r\n        }\r\n\r\n        const modal = {\r\n            children,\r\n            childProps: childProps,\r\n            modalOptions,\r\n            handleClose: async (result: any) => {\r\n                setIsOpen(false);\r\n                setTimeout(() => {\r\n                    setActiveModal(undefined);\r\n                    resolve(result);\r\n                }, 100);\r\n            }\r\n        };\r\n\r\n        setActiveModal(modal);\r\n        setTimeout(() => setIsOpen(true), 100);\r\n    }), [modalRoot]);\r\n\r\n    const closeModal = useCallback(() => {\r\n        if (!activeModal) return;\r\n        activeModal.handleClose(null);\r\n    }, [activeModal]);\r\n\r\n    return {\r\n        modalRoot,\r\n        openModal,\r\n        closeModal\r\n    };\r\n};\r\n\r\nexport default useModal;\r\n","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\EnterpriseTheme\\EnterpriseCharts.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\YetiPage\\YetiPage.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\Carousel\\Carousel.tsx",["275"],[],"import React from 'react';\r\nimport { Carousel } from 'react-responsive-carousel';\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\ninterface iCarouselItem {\r\n  label: string;\r\n  render: string | React.ReactElement;\r\n}\r\ninterface CarouselProps {\r\n  id: string;\r\n  items: iCarouselItem[]; // elements can be either image URLs or React Elements\r\n}\r\n\r\nconst CarouselComponent = ({\r\n    id,\r\n    items\r\n}: CarouselProps) => {\r\n  return (\r\n    <div id={id} className='carousel-component'>\r\n      <Carousel>\r\n        {items.map((item, index) => (\r\n            <div key={index}>\r\n                {item.label && <div className='carousel-label'>{item.label}</div>}\r\n                {typeof item.render === 'string' ? <img src={item.render} /> : item.render}\r\n            </div>\r\n        ))}\r\n      </Carousel>\r\n    </div>\r\n  );\r\n};\r\nexport default CarouselComponent;","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\HeroPageLayout\\HeroPageLayout.tsx",[],[],"C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\components\\HeroPageLayout\\SwitchHeroComponent.tsx",["276"],[],"import { Button } from '@material-ui/core';\r\nimport React, { useMemo } from 'react';\r\nimport Icon from '../Icon/Icon';\r\nexport interface CommonProps {\r\n    className?: string;\r\n    style?: any;\r\n    layoutClassName?: string;\r\n}\r\nexport interface IconProps extends CommonProps {\r\n    icon?: string;\r\n}\r\nexport interface iHeroComponent {\r\n    id: string;\r\n    type?: string;\r\n    commonProps?: CommonProps;\r\n    iconProps?: IconProps;\r\n    label?: string;\r\n    subLabel?: string;\r\n    body?: string;\r\n    onClick?: () => void;\r\n    components?: iHeroComponent[];\r\n}\r\ninterface SwitchHeroComponentProps {\r\n    heroComponent: iHeroComponent;\r\n}\r\nconst SwitchHeroComponent = ({\r\n    heroComponent\r\n}: SwitchHeroComponentProps) => {\r\n    const styles = useMemo(() => ({\r\n        ...heroComponent.commonProps?.style\r\n    }), [\r\n        heroComponent.commonProps?.style\r\n    ]);\r\n    const containerClasses = useMemo(() => `${heroComponent.type ?? 'text'} ${heroComponent.commonProps?.className} flexColumn`, [heroComponent]);\r\n    const switchComponent = useMemo(() => {\r\n        switch(heroComponent.type) {\r\n            case 'button':\r\n                return (\r\n                    <button \r\n                        type=\"button\" \r\n                        className={`button`} \r\n                        onClick={heroComponent.onClick}\r\n                    >\r\n                        {heroComponent.label}\r\n                    </button>\r\n                );\r\n            case 'four-square':\r\n                return heroComponent.components?.map(component => {\r\n                    const classes = `square ${component.commonProps?.className}`;\r\n                    return (\r\n                        <div className={classes}>\r\n                            <h2>{component.label}</h2>\r\n                            <p className=\"text-body bodyBold\">{component.subLabel}</p>\r\n                        </div>\r\n                    )\r\n                });\r\n            case 'slide-row-component':\r\n                if (!heroComponent.components) return null;\r\n                return (\r\n                    <>\r\n                        <div className=\"slide-row flexSB\">\r\n                            <div />\r\n                            <SwitchHeroComponent heroComponent={heroComponent.components[0]}/>\r\n                        </div>  \r\n                        <div className=\"slide-row flexSB\">\r\n                            <SwitchHeroComponent heroComponent={heroComponent.components[1]}/>\r\n                            <div />\r\n                        </div>  \r\n                    </>\r\n                );\r\n            case 'left-text-right-image-component':\r\n                if (!heroComponent.components || heroComponent.components.length !== 4) return null;\r\n                return (\r\n                    <div className={heroComponent?.commonProps?.layoutClassName ?? 'flex noWrap'}>\r\n                        <div className=\"left-text\">\r\n                            <SwitchHeroComponent heroComponent={heroComponent.components[0]}/>\r\n                        </div>\r\n                        <div className=\"right-image\">\r\n                            <SwitchHeroComponent heroComponent={heroComponent.components[1]}/>\r\n                            <SwitchHeroComponent heroComponent={heroComponent.components[2]}/>\r\n                            <SwitchHeroComponent heroComponent={heroComponent.components[3]}/>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'text':\r\n                return (\r\n                    <>\r\n                        {heroComponent.subLabel && <h5>{heroComponent.subLabel}</h5>}\r\n                        {heroComponent.label && <h2>{heroComponent.label}</h2>}\r\n                        {heroComponent.body && <div className=\"text-body bodyMedium\">{heroComponent.body}</div>}\r\n                        {heroComponent.components && heroComponent.components.length > 0 && <SwitchHeroComponent heroComponent={heroComponent.components[0]}/>}\r\n                    </>\r\n                );\r\n            case 'container':\r\n            default:\r\n                return (\r\n                    <>\r\n                        {heroComponent.iconProps && heroComponent.iconProps.icon && (\r\n                            <Icon \r\n                                icon={heroComponent.iconProps.icon} \r\n                                className={heroComponent.iconProps.className}\r\n                            />\r\n                        )}\r\n                        {heroComponent.subLabel && <h5>{heroComponent.subLabel}</h5>}\r\n                        {heroComponent.label && <h2>{heroComponent.label}</h2>}\r\n                        {heroComponent.body && <div className=\"text-body\">{heroComponent.body}</div>}\r\n                        <div className={heroComponent?.commonProps?.layoutClassName ?? 'flexColumn'}>\r\n                            {heroComponent.components && heroComponent.components.length > 0 && heroComponent.components.map(component => (\r\n                                <SwitchHeroComponent heroComponent={component}/>\r\n                            ))} \r\n                        </div>\r\n                    </>\r\n                );\r\n        }\r\n    }, [\r\n        heroComponent\r\n    ]);\r\n    return (\r\n        <div \r\n            id={heroComponent.id} \r\n            className={containerClasses} \r\n            style={styles}\r\n            onClick={heroComponent.onClick}\r\n        >\r\n            {switchComponent}\r\n        </div>\r\n    );\r\n};\r\nexport default SwitchHeroComponent;\r\n","C:\\Users\\Justin Gist\\Documents\\GitHub\\justingiist.github.io\\src\\pages\\ThemeSwitcher\\DesignerPage.tsx",[],[],{"ruleId":"277","severity":1,"message":"278","line":1,"column":10,"nodeType":"279","messageId":"280","endLine":1,"endColumn":17},{"ruleId":"277","severity":1,"message":"281","line":2,"column":8,"nodeType":"279","messageId":"280","endLine":2,"endColumn":22},{"ruleId":"277","severity":1,"message":"282","line":3,"column":8,"nodeType":"279","messageId":"280","endLine":3,"endColumn":19},{"ruleId":"277","severity":1,"message":"283","line":4,"column":8,"nodeType":"279","messageId":"280","endLine":4,"endColumn":22},{"ruleId":"277","severity":1,"message":"284","line":5,"column":3,"nodeType":"279","messageId":"280","endLine":5,"endColumn":18},{"ruleId":"277","severity":1,"message":"285","line":7,"column":8,"nodeType":"279","messageId":"280","endLine":7,"endColumn":18},{"ruleId":"277","severity":1,"message":"286","line":8,"column":8,"nodeType":"279","messageId":"280","endLine":8,"endColumn":18},{"ruleId":"277","severity":1,"message":"287","line":9,"column":8,"nodeType":"279","messageId":"280","endLine":9,"endColumn":18},{"ruleId":"277","severity":1,"message":"288","line":10,"column":8,"nodeType":"279","messageId":"280","endLine":10,"endColumn":15},{"ruleId":"277","severity":1,"message":"289","line":11,"column":8,"nodeType":"279","messageId":"280","endLine":11,"endColumn":15},{"ruleId":"277","severity":1,"message":"290","line":12,"column":8,"nodeType":"279","messageId":"280","endLine":12,"endColumn":14},{"ruleId":"277","severity":1,"message":"291","line":13,"column":8,"nodeType":"279","messageId":"280","endLine":13,"endColumn":14},{"ruleId":"277","severity":1,"message":"292","line":14,"column":8,"nodeType":"279","messageId":"280","endLine":14,"endColumn":14},{"ruleId":"293","severity":1,"message":"294","line":93,"column":5,"nodeType":"295","endLine":93,"endColumn":7,"suggestions":"296"},{"ruleId":"293","severity":1,"message":"297","line":118,"column":5,"nodeType":"295","endLine":118,"endColumn":7,"suggestions":"298"},{"ruleId":"293","severity":1,"message":"299","line":143,"column":5,"nodeType":"295","endLine":143,"endColumn":7,"suggestions":"300"},{"ruleId":"277","severity":1,"message":"301","line":3,"column":22,"nodeType":"279","messageId":"280","endLine":3,"endColumn":33},{"ruleId":"277","severity":1,"message":"302","line":177,"column":22,"nodeType":"279","messageId":"280","endLine":177,"endColumn":32},{"ruleId":"277","severity":1,"message":"303","line":179,"column":13,"nodeType":"279","messageId":"280","endLine":179,"endColumn":19},{"ruleId":"293","severity":1,"message":"304","line":257,"column":119,"nodeType":"295","endLine":257,"endColumn":165,"suggestions":"305"},{"ruleId":"277","severity":1,"message":"306","line":261,"column":15,"nodeType":"279","messageId":"280","endLine":261,"endColumn":27},{"ruleId":"277","severity":1,"message":"307","line":262,"column":15,"nodeType":"279","messageId":"280","endLine":262,"endColumn":31},{"ruleId":"277","severity":1,"message":"308","line":263,"column":15,"nodeType":"279","messageId":"280","endLine":263,"endColumn":29},{"ruleId":"277","severity":1,"message":"309","line":264,"column":15,"nodeType":"279","messageId":"280","endLine":264,"endColumn":28},{"ruleId":"293","severity":1,"message":"310","line":462,"column":8,"nodeType":"295","endLine":472,"endColumn":6,"suggestions":"311"},{"ruleId":"277","severity":1,"message":"312","line":1,"column":10,"nodeType":"279","messageId":"280","endLine":1,"endColumn":21},{"ruleId":"277","severity":1,"message":"301","line":2,"column":22,"nodeType":"279","messageId":"280","endLine":2,"endColumn":33},{"ruleId":"277","severity":1,"message":"313","line":34,"column":7,"nodeType":"279","messageId":"280","endLine":34,"endColumn":22},{"ruleId":"277","severity":1,"message":"314","line":39,"column":3,"nodeType":"279","messageId":"280","endLine":39,"endColumn":15},{"ruleId":"277","severity":1,"message":"315","line":5,"column":8,"nodeType":"279","messageId":"280","endLine":5,"endColumn":22},{"ruleId":"293","severity":1,"message":"316","line":117,"column":8,"nodeType":"295","endLine":121,"endColumn":6,"suggestions":"317"},{"ruleId":"318","severity":1,"message":"319","line":14,"column":5,"nodeType":"320","messageId":"321","endLine":16,"endColumn":6},{"ruleId":"277","severity":1,"message":"322","line":21,"column":23,"nodeType":"279","messageId":"280","endLine":21,"endColumn":34},{"ruleId":"277","severity":1,"message":"323","line":1,"column":10,"nodeType":"279","messageId":"280","endLine":1,"endColumn":22},{"ruleId":"277","severity":1,"message":"324","line":5,"column":8,"nodeType":"279","messageId":"280","endLine":5,"endColumn":12},{"ruleId":"277","severity":1,"message":"325","line":39,"column":9,"nodeType":"279","messageId":"280","endLine":39,"endColumn":21},{"ruleId":"277","severity":1,"message":"326","line":69,"column":11,"nodeType":"279","messageId":"280","endLine":69,"endColumn":20},{"ruleId":"327","severity":1,"message":"328","line":23,"column":52,"nodeType":"329","endLine":23,"endColumn":77},{"ruleId":"277","severity":1,"message":"330","line":1,"column":10,"nodeType":"279","messageId":"280","endLine":1,"endColumn":16},"@typescript-eslint/no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'CardCalculator' is defined but never used.","'CurveLayout' is defined but never used.","'HeroPageLayout' is defined but never used.","'iHeroPageLayout' is defined but never used.","'Visualizer' is defined but never used.","'chocolate2' is defined but never used.","'chocolate3' is defined but never used.","'swoosh1' is defined but never used.","'swoosh3' is defined but never used.","'phone1' is defined but never used.","'phone2' is defined but never used.","'phone3' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'experienceList'. Either include it or remove the dependency array.","ArrayExpression",["331"],"React Hook useMemo has a missing dependency: 'languagesList'. Either include it or remove the dependency array.",["332"],"React Hook useMemo has a missing dependency: 'techList'. Either include it or remove the dependency array.",["333"],"'iPageLayout' is defined but never used.","'closeModal' is assigned a value but never used.","'result' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'dimensions.isMobile'. Either include it or remove the dependency array.",["334"],"'renderOption' is assigned a value but never used.","'renderInputValue' is assigned a value but never used.","'getOptionValue' is assigned a value but never used.","'renderDisplay' is assigned a value but never used.","React Hook useMemo has an unnecessary dependency: 'dimensions.isMobile'. Either exclude it or remove the dependency array.",["335"],"'useCallback' is defined but never used.","'getValueFromKey' is assigned a value but never used.","'ContactPhone' is defined but never used.","'StopNavigation' is defined but never used.","React Hook useCallback has an unnecessary dependency: 'formData'. Either exclude it or remove the dependency array.",["336"],"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'alertResult' is assigned a value but never used.","'ThemeContext' is defined but never used.","'Icon' is defined but never used.","'modalOptions' is assigned a value but never used.","'iUseModal' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Button' is defined but never used.",{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},"Update the dependencies array to be: [experienceList]",{"range":"349","text":"350"},"Update the dependencies array to be: [languagesList]",{"range":"351","text":"352"},"Update the dependencies array to be: [techList]",{"range":"353","text":"354"},"Update the dependencies array to be: [dimensions.isMobile, errorMessage, disabledMessage, input.tooltip]",{"range":"355","text":"356"},"Update the dependencies array to be: [disabledMessage, input, onChange, value, errorMessage, memoizedTooltip, additionalClasses, label]",{"range":"357","text":"358"},"Update the dependencies array to be: [setErrorFields, validationSchema]",{"range":"359","text":"360"},[3852,3854],"[experienceList]",[4509,4511],"[languagesList]",[5144,5146],"[techList]",[10522,10568],"[dimensions.isMobile, errorMessage, disabledMessage, input.tooltip]",[19191,19401],"[disabledMessage, input, onChange, value, errorMessage, memoizedTooltip, additionalClasses, label]",[4675,4753],"[setErrorFields, validationSchema]"]